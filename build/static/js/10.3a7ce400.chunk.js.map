{"version":3,"sources":["pages/Dashboard/Tabs/Chats.js","pages/Dashboard/ChatLeftSidebar.js","components/CustomCollapse.js","components/UserProfileSidebar.js","pages/Dashboard/UserChat/UserHead.js","pages/Dashboard/UserChat/ChatInput.js","pages/Dashboard/UserChat/index.js","pages/Dashboard/index.js"],"names":["Chats","state","searchChat","modal","isOpenCollapse","newChatUserEmail","newChatUserMessage","isOpenAlert","errormessage","chatexistsId","goToChat","a","alert","li","document","getElementById","this","props","active_user","classList","add","e","console","log","target","setState","chat","preventDefault","index","chats","indexOf","activeUser","chatList","clickedItem","currentli","getElementsByTagName","i","length","contains","remove","k","userChat","getElementsByClassName","unread","id","style","display","initFirebaseBackend","firestore","collection","get","userSnapshot","exists","docs","map","data","email","includes","docid","userEmail","sort","join","doc","userExists","chatExists","createChat","msg","docId","timeStamp","Date","now","time","users","typing","messages","message","sender","type","set","Fragment","className","Button","onClick","color","UncontrolledTooltip","placement","Modal","isOpen","centered","toggle","ModalHeader","tag","ModalBody","Form","FormGroup","Alert","Label","htmlFor","Input","value","onChange","placeholder","ModalFooter","createNewChat","bind","InputGroup","size","InputGroupAddon","addonType","handleChange","maxHeight","key","to","openUserChat","Media","status","src","allUserData","list","image","trim","alt","body","name","seconds","React","Component","connect","Chat","setconversationNameInOpenChat","Layout","activeTab","TabContent","TabPane","tabId","history","CustomCollapse","toggleCollapse","CardHeader","iconClass","title","Collapse","CardBody","children","userSidebar","closeUserSidebar","useState","isOpen1","setIsOpen1","charAt","Card","description","location","openUserSidebar","setFullUser","dropdownOpen1","setDropdownOpen1","Row","Col","sm","xs","closeUserChat","isOnline","Dropdown","DropdownToggle","DropdownMenu","right","DropdownItem","ChatInput","textMessage","settextMessage","file","setfile","fileImage","setfileImage","onSubmit","onaddMessage","noGutters","withRouter","ref","useRef","chatMessages","setchatMessages","useEffect","current","recalculate","el","getScrollElement","scrollTop","scrollHeight","addMessage","timestamp","update","f","FieldValue","arrayUnion","scrolltoBottom","find","item","userType","Index","newChatFormVisible","user","blockList","componentDidMount","auth","onAuthStateChanged","push","getAllUsersData","getInfo","onlineStatusUpdate","where","then","snapshot","ob","setTimeout","isonline","isverify","clearTimeout","getBlockList","forEach","obj","blocklist","onSnapshot","dt","emails","res","b","filter","getEmail","search","fetchSearchEmail"],"mappings":"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","file":"static/js/10.3a7ce400.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Input, InputGroupAddon, InputGroup, Media, Button, UncontrolledTooltip } from \"reactstrap\";\r\nimport {  Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Label,  Collapse, CardHeader, CardBody, Alert,  Card } from 'reactstrap';\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport SimpleBar from \"simplebar-react\";\r\nimport { setconversationNameInOpenChat, activeUser } from \"../../../redux/actions\"\r\nimport { initFirebaseBackend } from \"../../../helpers/firebase\";\r\n\r\n// import OnlineUsers from \"./OnlineUsers\";\r\n\r\nclass Chats extends React.Component {\r\n    state = { \r\n        searchChat : \"\",\r\n        modal : false,\r\n        isOpenCollapse : false, \r\n        newChatUserEmail: \"\",\r\n        newChatUserMessage: \"\",\r\n        isOpenAlert: false,\r\n        errormessage:\"\",\r\n        chatexistsId: \"\"\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        var li = document.getElementById(\"conversation\" + this.props.active_user);\r\n        // var li = document.getElementById(\"conversation0\");\r\n        if(li){\r\n            li.classList.add(\"active\");\r\n        }\r\n    }\r\n\r\n    handleChange(e)  {\r\n        console.log(e.target)\r\n        // this.setState({ searchChat : e.target.value });\r\n        // var search = e.target.value;\r\n        // let conversation = this.state.recentChatList;\r\n        // let filteredArray = [];\r\n        \r\n        // //find conversation name from array\r\n        // for (let i = 0; i < conversation.length; i++) {\r\n        //     if(conversation[i].name.toLowerCase().includes(search) || conversation[i].name.toUpperCase().includes(search))\r\n        //         filteredArray.push(conversation[i]);\r\n        // }\r\n\r\n        // //set filtered items to state\r\n        // this.setState({ recentChatList : filteredArray })\r\n\r\n        // //if input value is blanck then assign whole recent chatlist to array\r\n        // if(search === \"\") this.setState({ recentChatList : this.props.recentChatList })\r\n    }\r\n\r\n    toggle() {\r\n        console.log(this.state)\r\n        this.setState({ modal : !this.state.modal });\r\n    }\r\n\r\n    toggleCollapse() {\r\n        this.setState({ isOpenCollapse : !this.state.isOpenCollapse });\r\n    }\r\n\r\n    openUserChat(e,chat) {\r\n        e.preventDefault();\r\n        //find index of current chat in array\r\n        var index = this.props.chats.indexOf(chat);\r\n        this.props.activeUser(index);\r\n        var chatList = document.getElementById(\"chat-list\");\r\n        var clickedItem = e.target;\r\n        var currentli = null;\r\n\r\n        if(chatList) {\r\n            var li = chatList.getElementsByTagName(\"li\");\r\n            //remove coversation user\r\n            for(var i=0; i<li.length; ++i){\r\n                if(li[i].classList.contains('active')){\r\n                    li[i].classList.remove('active');\r\n                }\r\n            }\r\n            //find clicked conversation user\r\n            for(var k=0; k<li.length; ++k){\r\n                if(li[k].contains(clickedItem)) {\r\n                    currentli = li[k];\r\n                    break;\r\n                } \r\n            }\r\n        }\r\n\r\n        //activation of clicked coversation user\r\n        if(currentli) {\r\n            currentli.classList.add('active');\r\n        }\r\n\r\n        var userChat = document.getElementsByClassName(\"user-chat\");\r\n        if(userChat) {\r\n            userChat[0].classList.add(\"user-chat-show\");\r\n        }\r\n\r\n        //removes unread badge if user clicks\r\n        var unread = document.getElementById(\"unRead\" + chat.id);\r\n        if(unread) {\r\n            unread.style.display=\"none\";\r\n        }\r\n    }\r\n    async userExists() {\r\n        const userSnapshot = await initFirebaseBackend().firestore().collection(\"users\").get();\r\n        try {\r\n          const exists = userSnapshot.docs.map((docs) => docs.data().email).includes(this.state.newChatUserEmail);\r\n          return exists;\r\n        } catch (e) {\r\n          console.log(e);\r\n          return false;\r\n        }\r\n      };\r\n\r\n      async chatExists () {\r\n        const docid = [this.state.newChatUserEmail, this.props.userEmail].sort().join(\":\");\r\n        const chat = await initFirebaseBackend().firestore().collection(\"chats\").doc(docid).get();\r\n        return chat.exists;\r\n      };\r\n\r\n    goToChat = async () => {\r\n        alert(\"Chat Is Already Exists\");\r\n    };\r\n\r\n    async createNewChat(){\r\n        const userExists = await this.userExists();\r\n        const { newChatUserEmail, newChatUserMessage } = this.state;\r\n        const { userEmail } = this.props;\r\n\r\n        if (newChatUserEmail && newChatUserMessage && newChatUserEmail !== userEmail) {\r\n            if (userExists) {\r\n              const chatExists = await this.chatExists();\r\n              try {\r\n                  if(chatExists){\r\n                    this.goToChat() \r\n                  } else{\r\n                    this.createChat(userEmail, newChatUserEmail, newChatUserMessage);\r\n                    this.setState({ modal : !this.state.modal });\r\n                  }\r\n              } catch (e) {\r\n                console.log(e);\r\n              }\r\n            } else {\r\n              this.setState({errormessage: \"User Is not registered\",isOpenAlert : true })\r\n            }\r\n          } else {\r\n            this.setState({errormessage: \"Please Enter Valid Data\",isOpenAlert : true })\r\n          }\r\n    }\r\n\r\n    async createChat(userEmail, email, msg)  {\r\n        const docId = [this.state.newChatUserEmail, this.props.userEmail].sort().join(\":\");\r\n        const timeStamp = Date.now();\r\n        const time = Date.now();\r\n\r\n        console.log({\r\n            docid: docId,\r\n            time: timeStamp,\r\n            users: [userEmail, email],\r\n            typing: [],\r\n            messages: [\r\n              {\r\n                message: msg,\r\n                sender: userEmail,\r\n                time: time,\r\n                type: \"text\",\r\n              },\r\n            ],\r\n          })\r\n        await initFirebaseBackend().firestore().collection(\"chats\").doc(docId).set({\r\n            docid: docId,\r\n            time: timeStamp,\r\n            users: [userEmail, email],\r\n            typing: [],\r\n            messages: [\r\n              {\r\n                message: msg,\r\n                sender: userEmail,\r\n                time: time,\r\n                type: \"text\",\r\n              },\r\n            ],\r\n          });\r\n      };\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                        <div>\r\n                            <div className=\"px-4 pt-4\">\r\n                            <div className=\"user-chat-nav float-right\">\r\n                                    <div  id=\"create-group\">\r\n                                        {/* Button trigger modal */}\r\n                                        <Button onClick={() => this.setState({ modal : !this.state.modal })} type=\"button\" color=\"link\" className=\"text-decoration-none text-muted font-size-18 py-0\">\r\n                                            <i className=\"ri-group-line mr-1\"></i>\r\n                                        </Button>\r\n                                    </div>\r\n                                    <UncontrolledTooltip target=\"create-group\" placement=\"bottom\">\r\n                                        New Chat\r\n                                    </UncontrolledTooltip>\r\n                                </div>\r\n\r\n                                <Modal isOpen={this.state.modal} centered toggle={() => this.setState({ modal : !this.state.modal })}>\r\n                                    <ModalHeader tag=\"h5\" className=\"modal-title font-size-16\" toggle={() => this.setState({ modal : !this.state.modal })}>{('Start New Chat')}</ModalHeader>\r\n                                    <ModalBody className=\"p-4\">\r\n                                        <Form>\r\n                                            <FormGroup className=\"mb-4\">\r\n                                                 <Alert isOpen={this.state.isOpenAlert} color=\"danger\">\r\n                                                    {this.state.errormessage}\r\n                                                </Alert>\r\n                                                <Label htmlFor=\"newchatemail-input\">{('User Email Id')}</Label>\r\n                                                <Input type=\"text\" className=\"form-control\" id=\"newchatemail-input\" value={this.state.newChatUserEmail} onChange={(e) => this.setState({newChatUserEmail:e.target.value})} placeholder=\"Enter User Email ID\" />\r\n                                            </FormGroup>\r\n                                            <FormGroup>\r\n                                                <Label htmlFor=\"newChatmessage-input\">{('Message')}</Label>\r\n                                                <Input type=\"text\" className=\"form-control\" id=\"newChatmessage-input\" value={this.state.newChatUserMessage} onChange={(e) => this.setState({newChatUserMessage:e.target.value})} placeholder=\"Enter Message\" />\r\n                                            </FormGroup>\r\n                                        </Form>\r\n                                    </ModalBody>\r\n                                    <ModalFooter>\r\n                                        <Button type=\"button\" color=\"link\" onClick={() => this.setState({ modal : !this.state.modal })}>{('Close')}</Button>\r\n                                        <Button type=\"button\" color=\"primary\" onClick={this.createNewChat.bind(this)}>{('Start Chatting')}</Button>\r\n                                    </ModalFooter>\r\n                                </Modal>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                <h4 className=\"mb-4\">Chats</h4>\r\n                                <div className=\"search-box chat-search-box\">\r\n                                    <InputGroup size=\"lg\" className=\"mb-3 bg-light rounded-lg\">\r\n                                        <InputGroupAddon addonType=\"prepend\">\r\n                                            <Button color=\"link\" className=\"text-muted pr-1 text-decoration-none\" type=\"button\">\r\n                                                <i className=\"ri-search-line search-icon font-size-18\"></i>\r\n                                            </Button>\r\n                                        </InputGroupAddon>\r\n                                        <Input type=\"text\" value={this.state.searchChat} onChange={(e) => this.handleChange(e)} className=\"form-control bg-light\" placeholder=\"Search messages or users\" />\r\n                                    </InputGroup> \r\n                                </div>\r\n                                {/* Search Box */}\r\n                            </div> \r\n\r\n                            {/* Start chat-message-list  */}\r\n                            <div className=\"px-2\">\r\n                                <h5 className=\"mb-3 px-3 font-size-16\">Recent</h5>\r\n                                <SimpleBar style={{ maxHeight: \"100%\" }} className=\"chat-message-list\">\r\n                                    <ul className=\"list-unstyled chat-list chat-user-list\" id=\"chat-list\">\r\n                                        {this.props.chats.length > 0 ?\r\n                                            this.props.chats.map((chat, key) =>\r\n                                                <li key={key} id={\"conversation\" + key} \r\n                                                className={\r\n                                                    // chat.unRead ? \"unread\" : chat.isTyping ?  \"typing\" : \r\n                                                     key === this.props.active_user ? \"active\" : \"\"}\r\n                                                >\r\n                                                    <Link to=\"#\" onClick={(e) => this.openUserChat(e, chat)}>\r\n                                                        <Media>\r\n                                                            {\r\n                                                                // chat.profilePicture === \"Null\" ?\r\n                                                                //     <div className={\"chat-user-img \" + chat.status +\" align-self-center mr-3\"}>\r\n                                                                //         <div className=\"avatar-xs\">\r\n                                                                //             <span className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\r\n                                                                //                 {chat.name.charAt(0)}\r\n                                                                //             </span>\r\n                                                                //         </div>\r\n                                                                //         {\r\n                                                                //             chat.status &&  <span className=\"user-status\"></span>\r\n                                                                //         }\r\n                                                                //     </div>\r\n                                                                // :\r\n                                                                    <div className={\"chat-user-img \" + chat.status +\" align-self-center mr-3\"}>\r\n                                                                        <img src={this.props.allUserData.map((list) => {\r\n                                                                                    if ( list.email ===(chat.users[0] !== this.props.userEmail ? chat.users[0] : chat.users[1])) {\r\n                                                                                        return list.image;\r\n                                                                                    } else {  return \"\"; }\r\n                                                                                }).join(\"\").trim(\"\")} className=\"rounded-circle avatar-xs\" alt=\"letschat\" />\r\n                                                                        {\r\n                                                                            chat.status &&  <span className=\"user-status\"></span>\r\n                                                                        }\r\n                                                                    </div>\r\n                                                            }\r\n                                                            \r\n                                                            <Media body className=\"overflow-hidden\">\r\n                                                                <h5 className=\"text-truncate font-size-15 mb-1\">\r\n                                                                    {this.props.allUserData.map((list) => {\r\n                                                                        if (list.email === (chat.users[0] !== this.props.userEmail ? chat.users[0] : chat.users[1])) {\r\n                                                                            return list.name;\r\n                                                                        }\r\n                                                                        else{\r\n                                                                            return \"\"\r\n                                                                        }\r\n                                                                    })}\r\n                                                                </h5>\r\n                                                                <p className=\"chat-user-message text-truncate mb-0\">\r\n                                                                    {\r\n                                                                        ((chat.typing).length > 0 && (chat.typing).includes(this.props.userEmail)) ?\r\n                                                                        <>\r\n                                                                            typing<span className=\"animate-typing\">\r\n                                                                            <span className=\"dot ml-1\"></span>\r\n                                                                            <span className=\"dot ml-1\"></span>\r\n                                                                            <span className=\"dot ml-1\"></span>\r\n                                                                        </span>\r\n                                                                        </>\r\n                                                                        :\r\n                                                                        <>\r\n                                                                            {/* {\r\n                                                                                chat.messages && (chat.messages.length > 0 && chat.messages[(chat.messages).length - 1].isImageMessage === true) ? <i className=\"ri-image-fill align-middle mr-1\"></i> : null\r\n                                                                            }\r\n                                                                            {\r\n                                                                                chat.messages && (chat.messages.length > 0  && chat.messages[(chat.messages).length - 1].isFileMessage === true) ? <i className=\"ri-file-text-fill align-middle mr-1\"></i> : null\r\n                                                                            } */}\r\n                                                                            {chat.messages && chat.messages.length > 0 ?  chat.messages[(chat.messages).length - 1].message : null}\r\n                                                                       </>\r\n                                                                    }\r\n\r\n                                                    \r\n                                                                    \r\n                                                                </p>\r\n                                                            </Media>\r\n                                                            {/* {console.log(chat.messages[(chat.messages).length - 1].time.seconds)} */}\r\n                                                            <div className=\"font-size-11\">{chat.messages && chat.messages.length > 0 ?  (chat.messages[(chat.messages).length - 1].time.seconds) : null}</div>\r\n                                                            {/* {chat.unRead === 0 ? null :\r\n                                                                <div className=\"unread-message\" id={\"unRead\" + chat.id}>\r\n                                                                    <span className=\"badge badge-soft-danger badge-pill\">{chat.messages && chat.messages.length > 0 ? chat.unRead >= 20 ? chat.unRead + \"+\" : chat.unRead  : \"\"}</span>\r\n                                                                </div>\r\n                                                            }  */}\r\n                                                        </Media>\r\n                                                    </Link>\r\n                                                </li>\r\n                                            ) : \"No Chats Available\"\r\n                                        }\r\n                                    </ul>\r\n                                    </SimpleBar>\r\n                                    \r\n                            </div>\r\n                        </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { active_user } = state.Chat;\r\n    return { active_user };\r\n};\r\n\r\nexport default connect(mapStateToProps, { setconversationNameInOpenChat, activeUser })(Chats);\r\n// export default Chats;","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { TabContent, TabPane } from \"reactstrap\";\r\n\r\n// import Profile from \"./Tabs/Profile\";\r\n// import Groups from \"./Tabs/Groups\";\r\n// import Contacts from \"./Tabs/Contacts\";\r\n// import Settings from \"./Tabs/Settings\";\r\nimport Chats from \"./Tabs/Chats\";\r\n\r\nfunction ChatLeftSidebar(props) {\r\n\r\n    const activeTab = props.activeTab;\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"chat-leftsidebar mr-lg-1\">\r\n\r\n                <TabContent activeTab={activeTab}>\r\n                    {/* <TabPane tabId=\"profile\" id=\"pills-user\">\r\n                        <Profile />\r\n                    </TabPane> */}\r\n\r\n                    <TabPane tabId=\"chat\" id=\"pills-chat\">\r\n                        <Chats      \r\n                            history={props.history}\r\n                            chats={props.chats}\r\n                            userEmail={props.userEmail}\r\n                            allUserData={props.allUserData}\r\n                        />\r\n                    </TabPane>\r\n\r\n                    {/* <TabPane tabId=\"group\" id=\"pills-groups\">\r\n                        <Groups />\r\n                    </TabPane>\r\n\r\n                    <TabPane tabId=\"contacts\" id=\"pills-contacts\">\r\n                        <Contacts />\r\n                    </TabPane>\r\n\r\n                    <TabPane tabId=\"settings\" id=\"pills-setting\">\r\n                        <Settings />\r\n                    </TabPane> */}\r\n                </TabContent>\r\n\r\n                </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nconst mapStatetoProps = state => {\r\n    return {\r\n      ...state.Layout\r\n    };\r\n};\r\n\r\nexport default connect(mapStatetoProps, null)(ChatLeftSidebar);","import React from 'react';\r\nimport { Collapse, CardBody, CardHeader } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction CustomCollapse(props) {\r\n    const { isOpen, toggleCollapse } = props;\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n                        <Link to=\"#\" onClick={toggleCollapse} className=\"text-dark\" >\r\n                                            <CardHeader id=\"profile-user-headingOne\">\r\n                                                <h5 className=\"font-size-14 m-0\">\r\n                                                    {\r\n                                                        props.iconClass &&<i className={props.iconClass + \" mr-2 align-middle d-inline-block\"}></i>\r\n                                                    }\r\n                                                     {(props.title)}\r\n                                                    <i className={isOpen ? \"mdi mdi-chevron-up float-right accor-plus-icon\" : \"mdi mdi-chevron-right float-right accor-plus-icon\"}></i>\r\n                                                </h5>\r\n                                            </CardHeader>\r\n                                        </Link>\r\n\r\n                                        <Collapse isOpen={isOpen}>\r\n                                            <CardBody>\r\n                                                {props.children}\r\n                                            </CardBody>\r\n                                        </Collapse>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default CustomCollapse;","import React, { useState } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { Button, Card} from \"reactstrap\";\r\nimport SimpleBar from \"simplebar-react\";\r\n\r\nimport CustomCollapse from \"./CustomCollapse\";\r\nimport { closeUserSidebar } from \"../redux/actions\";\r\n\r\n\r\nfunction UserProfileSidebar(props) {\r\n    const [isOpen1, setIsOpen1] = useState(true);\r\n\r\n    const toggleCollapse1 = () => {\r\n        setIsOpen1(!isOpen1);\r\n    };\r\n\r\n    // const toggleCollapse2 = () => {\r\n    //     setIsOpen2(!isOpen2);\r\n    //     setIsOpen1(false);\r\n    //     setIsOpen3(false);\r\n    // };\r\n\r\n    // const toggleCollapse3 = () => {\r\n    //     setIsOpen3(!isOpen3);\r\n    //     setIsOpen1(false);\r\n    //     setIsOpen2(false);\r\n    // };\r\n\r\n    // closes sidebar\r\n    const closeuserSidebar=()=> {\r\n        props.closeUserSidebar();\r\n    }\r\n    // style={{display: props.userSidebar  ? \"block\" : \"none\"}}\r\n    return (\r\n        <React.Fragment>\r\n           <div style={{display: (props.userSidebar === true)  ? \"block\" : \"none\"}} className=\"user-profile-sidebar\">\r\n                        <div className=\"px-3 px-lg-4 pt-3 pt-lg-4\">\r\n                            <div className=\"user-chat-nav text-right\">\r\n                                <Button color=\"none\" type=\"button\" onClick={closeuserSidebar} className=\"nav-btn\" id=\"user-profile-hide\">\r\n                                    <i className=\"ri-close-line\"></i>\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"text-center p-4 border-bottom\">\r\n\r\n                            <div className=\"mb-4 d-flex justify-content-center\">\r\n                                {\r\n                                    props.activeUser.image ===\"Null\" ?\r\n                                        <div className=\"avatar-lg\">\r\n                                            <span className=\"avatar-title rounded-circle bg-soft-primary text-primary font-size-24\">\r\n                                                {props.activeUser.name.charAt(0)}\r\n                                            </span>\r\n                                        </div>\r\n                                    : <img src={props.activeUser.image} className=\"rounded-circle avatar-lg img-thumbnail\" alt=\"letschat\" />\r\n                                }\r\n                                \r\n                            </div>\r\n\r\n                            <h5 className=\"font-size-16 mb-1 text-truncate\">{props.activeUser.name}</h5>\r\n                            <p className=\"text-muted text-truncate mb-1\">\r\n                            {\r\n                                props.activeUser ? <> <i className=\"ri-record-circle-fill font-size-10 text-success mr-1\"></i> </>\r\n                                                :  <> <i className=\"ri-record-circle-fill font-size-10 text-secondary mr-1\"></i></>\r\n                            }\r\n                                Active</p>\r\n                        </div>\r\n   \r\n                        <SimpleBar style={{ maxHeight: \"100%\" }} className=\"p-4 user-profile-desc\">\r\n                            <div className=\"text-muted\">\r\n                                <p className=\"mb-4\">\"{('If several languages coalesce, the grammar of the resulting language is more simple and regular than that of the individual.')}\"</p>\r\n                            </div>\r\n\r\n                            <div id=\"profile-user-accordion\" className=\"custom-accordion\">\r\n                                <Card className=\"shadow-none border mb-2\">\r\n                                    {/* import collaps */}\r\n                                        <CustomCollapse\r\n                                            title = \"About\"\r\n                                            iconClass = \"ri-user-2-line\"\r\n                                            isOpen={isOpen1}\r\n                                            toggleCollapse={toggleCollapse1}\r\n                                        >\r\n\r\n                                            <div>\r\n                                                <p className=\"text-muted mb-1\">{('Name')}</p>\r\n                                                <h5 className=\"font-size-14\">{props.activeUser.name}</h5>\r\n                                            </div>\r\n\r\n                                            <div className=\"mt-4\">\r\n                                                <p className=\"text-muted mb-1\">{('Email')}</p>\r\n                                                <h5 className=\"font-size-14\">{props.activeUser.email}</h5>\r\n                                            </div>\r\n\r\n                                            <div className=\"mt-4\">\r\n                                                <p className=\"text-muted mb-1\">{('Description')}</p>\r\n                                                <h5 className=\"font-size-14\">{props.activeUser.description}</h5>\r\n                                            </div>\r\n\r\n                                            <div className=\"mt-4\">\r\n                                                <p className=\"text-muted mb-1\">{('Location')}</p>\r\n                                                <h5 className=\"font-size-14 mb-0\">{props.activeUser.location}</h5>\r\n                                            </div>\r\n                                        </CustomCollapse>\r\n                                </Card>\r\n                                {/* End About card */}\r\n\r\n                                {/* <Card className=\"mb-1 shadow-none border\">\r\n                                        <CustomCollapse\r\n                                            title = \"Attached Files\"\r\n                                            iconClass = \"ri-attachment-line\"\r\n                                            isOpen={isOpen2}\r\n                                            toggleCollapse={toggleCollapse2}\r\n                                        >\r\n                                            <AttachedFiles files={files} />\r\n                                        </CustomCollapse>\r\n                                </Card> */}\r\n\r\n                                {/* {\r\n                                    props.activeUser.isGroup === true &&\r\n                                    <Card className=\"mb-1 shadow-none border\">\r\n                                        <CustomCollapse\r\n                                                title = \"Members\"\r\n                                                iconClass = \"ri-group-line\"\r\n                                                isOpen={isOpen3}\r\n                                                toggleCollapse={toggleCollapse3}\r\n                                            >\r\n                                                        <Card className=\"p-2 mb-2\">\r\n                                                            <Media className=\"align-items-center\">\r\n                                                                            <div className=\"chat-user-img align-self-center mr-3\">\r\n                                                                                        <div className=\"avatar-xs\">\r\n                                                                                            <span className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\r\n                                                                                                S\r\n                                                                                            </span>\r\n                                                                                        </div>\r\n                                                                                    </div>\r\n                                                                <Media body>\r\n                                                                    <div className=\"text-left\">\r\n                                                                        <h5 className=\"font-size-14 mb-1\">{t('Sara Muller')}\r\n                                                                        <Badge color=\"danger\" className=\"badge-soft-danger float-right\">{t('Admin')}</Badge>\r\n                                                                        </h5>\r\n                                                                    </div>\r\n                                                                </Media>\r\n                                                            </Media>\r\n                                                        </Card>\r\n\r\n                                                        <Card className=\"p-2 mb-2\">\r\n                                                            <Media className=\"align-items-center\">\r\n                                                                            <div className=\"chat-user-img align-self-center mr-3\">\r\n                                                                                        <div className=\"avatar-xs\">\r\n                                                                                            <span className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\r\n                                                                                                O\r\n                                                                                            </span>\r\n                                                                                        </div>\r\n                                                                                    </div>\r\n                                                                <Media body>\r\n                                                                    <div className=\"text-left\">\r\n                                                                        <h5 className=\"font-size-14 mb-1\">{t('Ossie Wilson')}</h5>\r\n                                                                    </div>\r\n                                                                </Media>\r\n                                                            </Media>\r\n                                                        </Card>\r\n\r\n                                                        <Card className=\"p-2 mb-2\">\r\n                                                            <Media className=\"align-items-center\">\r\n                                                                <div className=\"chat-avatar\">\r\n                                                                    \r\n                                                                    <img src={avatar7} className=\"rounded-circle chat-user-img avatar-xs mr-3\" alt=\"letschat\" />\r\n                                                                </div>\r\n                                                                <Media body>\r\n                                                                    <div className=\"text-left\">\r\n                                                                        <h5 className=\"font-size-14 mb-1\">{t('Paul Haynes')}</h5>\r\n                                                                    </div>\r\n                                                                </Media>\r\n                                                            </Media>\r\n                                                        </Card>\r\n                                            </CustomCollapse>\r\n                                    </Card>\r\n                                } */}\r\n                            </div>\r\n                        </SimpleBar>\r\n                        {/* end user-profile-desc */}\r\n                        </div>\r\n                \r\n         \r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { active_user } = state.Chat;\r\n    const { userSidebar } = state.Layout;\r\n    return { active_user,userSidebar };\r\n};\r\n\r\nexport default connect(mapStateToProps, { closeUserSidebar })(UserProfileSidebar);","import React, { useState } from \"react\";\r\nimport {\r\n  Dropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  Media,\r\n  Button,\r\n  Input,\r\n  Row,\r\n  Col,\r\n} from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { openUserSidebar, setFullUser } from \"../../../redux/actions\";\r\n\r\nfunction UserHead(props) {\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n  const [dropdownOpen1, setDropdownOpen1] = useState(false);\r\n\r\n  const toggle = () => setDropdownOpen(!dropdownOpen);\r\n  const toggle1 = () => setDropdownOpen1(!dropdownOpen1);\r\n\r\n  const openUserSidebar = (e) => {\r\n    e.preventDefault();\r\n    props.openUserSidebar();\r\n  };\r\n\r\n  function closeUserChat(e) {\r\n    e.preventDefault();\r\n    var userChat = document.getElementsByClassName(\"user-chat\");\r\n    if (userChat) {\r\n      userChat[0].classList.remove(\"user-chat-show\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"p-3 p-lg-4 border-bottom\">\r\n        <Row className=\"align-items-center\">\r\n          <Col sm={4} xs={8}>\r\n            <Media className=\"align-items-center\">\r\n              <div className=\"d-block d-lg-none mr-2\">\r\n                <Link\r\n                  to=\"#\"\r\n                  onClick={(e) => closeUserChat(e)}\r\n                  className=\"user-chat-remove text-muted font-size-16 p-2\"\r\n                >\r\n                  <i className=\"ri-arrow-left-s-line\"></i>\r\n                </Link>\r\n              </div>\r\n              {/* {props.users[props.active_user].profilePicture !== \"Null\" ? ( */}\r\n                <div className=\"mr-3\">\r\n                  <img\r\n                    src={props.allUserData.map((list) => {\r\n                        if ( list.email === (props.chats[props.active_user].users[0] !== props.userEmail ? props.chats[props.active_user].users[0] : props.chats[props.active_user].users[1])) {\r\n                            return list.image;\r\n                        } else {  return \"\"; }\r\n                    }).join(\"\").trim(\"\")}\r\n                    className=\"rounded-circle avatar-xs\"\r\n                    alt=\"letschat\"\r\n                  />\r\n                </div>\r\n\r\n              <Media body className=\"overflow-hidden\">\r\n                <h5 className=\"font-size-16 mb-0 text-truncate\">\r\n                  <Link\r\n                    to=\"#\"\r\n                    onClick={(e) => openUserSidebar(e)}\r\n                    className=\"text-reset user-profile-show\"\r\n                  >\r\n                    {props.allUserData.map((list) => {\r\n                        if (list.email === (props.chats[props.active_user].users[0] !== props.userEmail ? props.chats[props.active_user].users[0] : props.chats[props.active_user].users[1])) {\r\n                            return list.name;\r\n                        }\r\n                        else{\r\n                            return \"\"\r\n                        }\r\n                    })}\r\n                  </Link>\r\n                  {props.allUserData.map((list) => {\r\n                        if (list.email === (props.chats[props.active_user].users[0] !== props.userEmail ? props.chats[props.active_user].users[0] : props.chats[props.active_user].users[1])) {\r\n                            if(list.isOnline){\r\n                                return(<>\r\n                                    <i className=\"ri-record-circle-fill font-size-10 text-success d-inline-block ml-1\"></i>\r\n                                 </>)\r\n                            } else{\r\n                                return(<>\r\n                                    <i className=\"ri-record-circle-fill font-size-10 text-secondary d-inline-block ml-1\"></i>\r\n                                </>)\r\n                            }\r\n                        }\r\n                        else{\r\n                            return(<>\r\n                                <i className=\"ri-record-circle-fill font-size-10 text-secondary d-inline-block ml-1\"></i>\r\n                            </>)\r\n                        }\r\n                    })\r\n                  }\r\n                </h5>\r\n              </Media>\r\n            </Media>\r\n          </Col>\r\n          <Col sm={8} xs={4}>\r\n            <ul className=\"list-inline user-chat-nav text-right mb-0\">\r\n              <li className=\"list-inline-item d-none d-lg-inline-block\">\r\n                <Button\r\n                  type=\"button\"\r\n                  color=\"none\"\r\n                  onClick={(e) => openUserSidebar(e)}\r\n                  className=\"nav-btn user-profile-show\"\r\n                >\r\n                  <i className=\"ri-user-2-line\"></i>\r\n                </Button>\r\n              </li>\r\n\r\n              <li className=\"list-inline-item\">\r\n                <Dropdown isOpen={dropdownOpen1} toggle={toggle1}>\r\n                  <DropdownToggle\r\n                    className=\"btn nav-btn \"\r\n                    color=\"none\"\r\n                    type=\"button\"\r\n                  >\r\n                    <i className=\"ri-more-fill\"></i>\r\n                  </DropdownToggle>\r\n                  <DropdownMenu right>\r\n                    <DropdownItem\r\n                      className=\"d-block d-lg-none user-profile-show\"\r\n                      onClick={(e) => openUserSidebar(e)}\r\n                    >\r\n                      View profile{\" \"}\r\n                      <i className=\"ri-user-2-line float-right text-muted\"></i>\r\n                    </DropdownItem>\r\n                  </DropdownMenu>\r\n                </Dropdown>\r\n              </li>\r\n            </ul>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { active_user } = state.Chat;\r\n  return { ...state.Layout, active_user };\r\n};\r\n\r\nexport default connect(mapStateToProps, { openUserSidebar, setFullUser })(\r\n  UserHead\r\n);\r\n","import React, { useState } from 'react';\r\nimport { Button, Input, Row, Col, UncontrolledTooltip, ButtonDropdown, DropdownToggle, DropdownMenu, Label, Form } from \"reactstrap\";\r\nimport { Picker } from 'emoji-mart'\r\nimport 'emoji-mart/css/emoji-mart.css'\r\n\r\nfunction ChatInput(props) {\r\n    const [textMessage, settextMessage] = useState(\"\");\r\n    const [isOpen, setisOpen] = useState(false);\r\n    const [file, setfile] = useState({\r\n        name : \"\",\r\n        size : \"\"\r\n    });\r\n    const [fileImage, setfileImage] = useState(\"\")\r\n\r\n    const toggle = () => setisOpen(!isOpen);\r\n\r\n    //function for text input value change\r\n    const handleChange = e => {\r\n        settextMessage(e.target.value)\r\n    }\r\n\r\n    //function for add emojis\r\n    const addEmoji = e => {\r\n        let emoji = e.native;\r\n        settextMessage(textMessage+emoji)\r\n    };\r\n\r\n    //function for file input change\r\n    const handleFileChange = e => {\r\n        if(e.target.files.length !==0 )\r\n        setfile({\r\n            name : e.target.files[0].name,\r\n            size : e.target.files[0].size\r\n        })\r\n    }\r\n\r\n    //function for image input change\r\n    const handleImageChange = e => {\r\n        if(e.target.files.length !==0 )\r\n        setfileImage(URL.createObjectURL(e.target.files[0]))\r\n    }\r\n\r\n    //function for send data to onaddMessage function(in userChat/index.js component)\r\n    const onaddMessage = (e, textMessage) => {\r\n        e.preventDefault();\r\n        //if text value is not emptry then call onaddMessage function\r\n        if(textMessage !== \"\") {\r\n            props.onaddMessage(textMessage, \"textMessage\");\r\n            settextMessage(\"\");\r\n        }\r\n\r\n        //if file input value is not empty then call onaddMessage function\r\n        if(file.name !== \"\") {\r\n            props.onaddMessage(file, \"fileMessage\");\r\n            setfile({\r\n                name : \"\",\r\n                size : \"\"\r\n            })\r\n        }\r\n\r\n        //if image input value is not empty then call onaddMessage function\r\n        if(fileImage !== \"\") {\r\n            props.onaddMessage(fileImage, \"imageMessage\");\r\n            setfileImage(\"\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"p-3 p-lg-4 border-top mb-0\">\r\n                            <Form onSubmit={(e) => onaddMessage(e, textMessage)} >\r\n                                <Row noGutters>\r\n                                    <Col>\r\n                                        <div>\r\n                                            <Input type=\"text\" value={textMessage} onChange={handleChange} className=\"form-control form-control-lg bg-light border-light\" placeholder=\"Enter Message...\" />\r\n                                        </div>\r\n                                    </Col>\r\n                                    <Col xs=\"auto\">\r\n                                        <div className=\"chat-input-links ml-md-2\">\r\n                                            <ul className=\"list-inline mb-0\">\r\n                                                {/* <li className=\"list-inline-item\">\r\n                                                <ButtonDropdown className=\"emoji-dropdown\" direction=\"up\" isOpen={isOpen} toggle={toggle}>\r\n                                                    <DropdownToggle id=\"emoji\" color=\"link\" className=\"text-decoration-none font-size-16 btn-lg waves-effect\">\r\n                                                        <i className=\"ri-emotion-happy-line\"></i>\r\n                                                    </DropdownToggle>\r\n                                                    <DropdownMenu className=\"dropdown-menu-lg-right\">\r\n                                                        <Picker onSelect={addEmoji} />\r\n                                                    </DropdownMenu>\r\n                                                    </ButtonDropdown>\r\n                                                    <UncontrolledTooltip target=\"emoji\" placement=\"top\">\r\n                                                        Emoji\r\n                                                    </UncontrolledTooltip>\r\n                                                </li> */}\r\n                                      \r\n                                                {/* <li className=\"list-inline-item input-file\">\r\n                                                    <Label id=\"images\" className=\"mr-1 btn btn-link text-decoration-none font-size-16 btn-lg waves-effect\">\r\n                                                        <i className=\"ri-image-fill\"></i>\r\n                                                    <Input onChange={(e) => handleImageChange(e)} accept=\"image/*\" type=\"file\" name=\"fileInput\" size=\"60\" />\r\n                                                    </Label>   \r\n                                                    <UncontrolledTooltip target=\"images\" placement=\"top\">\r\n                                                        Images\r\n                                                    </UncontrolledTooltip>\r\n                                                </li> */}\r\n                                                <li className=\"list-inline-item\">\r\n                                                    <Button type=\"submit\" color=\"primary\" className=\"font-size-16 btn-lg chat-send waves-effect waves-light\">\r\n                                                        <i className=\"ri-send-plane-2-fill\"></i>\r\n                                                    </Button>\r\n                                                </li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Form>\r\n                        </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ChatInput;","import React, { useState,useEffect, useRef } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport SimpleBar from \"simplebar-react\";\r\nimport { withRouter } from 'react-router-dom';\r\nimport UserProfileSidebar from \"../../../components/UserProfileSidebar\";\r\nimport UserHead from \"./UserHead\";\r\nimport ChatInput from \"./ChatInput\";\r\nimport { openUserSidebar,setFullUser } from \"../../../redux/actions\";\r\nimport { initFirebaseBackend } from \"../../../helpers/firebase\";\r\n\r\nfunction UserChat(props) {\r\n    const ref = useRef();\r\n    // const [ allUsers ] = useState(props.chats);\r\n    const [ chatMessages, setchatMessages ] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if(props.chats.length > 0) setchatMessages(props.chats[props.active_user].messages);\r\n        ref.current.recalculate();\r\n        if (ref.current.el) {\r\n            ref.current.getScrollElement().scrollTop = ref.current.getScrollElement().scrollHeight;\r\n        }\r\n    },[props.active_user, props.chats]);\r\n\r\n    const addMessage = async (message, type) => {\r\n        const { docid } = props.chats[props.active_user];\r\n        const { userEmail } = props;\r\n        const time = Date.now()\r\n        console.log(time)\r\n        const timestamp = Date.now();\r\n        if(message && message !== '')\r\n        await initFirebaseBackend().firestore().collection(\"chats\").doc(docid).update({\r\n            messages: initFirebaseBackend().f().firestore.FieldValue.arrayUnion({\r\n            sender: userEmail,\r\n            message: message,\r\n            time: time,\r\n            type: \"text\",\r\n          }),\r\n          time: timestamp,\r\n        });\r\n        scrolltoBottom();\r\n    }\r\n\r\n    function scrolltoBottom(){\r\n        if (ref.current.el) {\r\n            ref.current.getScrollElement().scrollTop = ref.current.getScrollElement().scrollHeight;\r\n        }\r\n    }\r\n\r\n    function isToday(someDate){\r\n        // const today = new Date()\r\n        // return someDate.getDate() === today.getDate() &&\r\n        //   someDate.getMonth() === today.getMonth() &&\r\n        //   someDate.getFullYear() === today.getFullYear()\r\n        return false;\r\n      }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"user-chat w-100\">\r\n                <div className=\"d-lg-flex\">\r\n                    <div className={ props.userSidebar ? \"w-70\" : \"w-100\" }>\r\n                        {/* render user head */}\r\n                        <UserHead chats = {props.chats} allUserData={props.allUserData} userEmail = {props.userEmail} /> \r\n\r\n                            <SimpleBar style={{ maxHeight: \"100%\" }} ref={ref} className=\"chat-conversation p-3 p-lg-4\" id=\"messages\">\r\n                                   <ul className=\"list-unstyled mb-0\">\r\n                                    {(chatMessages.length > 0) ?\r\n                                    chatMessages.map((chat, key) => \r\n                                        isToday(chat.time.seconds) === true ? <li key={\"dayTitle\" + key}> \r\n                                            <div className=\"chat-day-title\">\r\n                                                <span className=\"title\">Today</span>\r\n                                            </div>\r\n                                        </li> : \r\n                                            <li key={key} className={chat.sender === props.userEmail ? \"right\" : \"\"}>\r\n                                                <div className=\"conversation-list\">\r\n                                                        {\r\n                                                            //logic for display user name and profile only once, if current and last messaged sent by same receiver\r\n                                                            chatMessages[key+1] ? chatMessages[key].sender === chatMessages[key+1].sender ? \r\n                                                            \r\n                                                            <div className=\"chat-avatar\">\r\n                                                                <div className=\"blank-div\"></div>\r\n                                                            </div>\r\n                                                            :  \r\n                                                                <div className=\"chat-avatar\">\r\n                                                                    {chat.sender === props.userEmail ?   <img src={(props.allUserData.find(item => item.email === props.userEmail)).image} alt=\"letsChat\" /> : \r\n                                                                        (props.allUserData.find(item => item.email === (props.chats[props.active_user].users.find(item => item !== props.userEmail)))).image === \"Null\" ?\r\n                                                                            <div className=\"chat-user-img align-self-center mr-3\">\r\n                                                                                <div className=\"avatar-xs\">\r\n                                                                                    <span className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\r\n                                                                                        {(props.allUserData.find(item => item.email === (props.chats[props.active_user].users.find(item => item !== props.userEmail)))).name.charAt(0)}\r\n                                                                                    </span>\r\n                                                                                </div>\r\n                                                                            </div>\r\n                                                                        :  <img src={(props.allUserData.find(item => item.email === (props.chats[props.active_user].users.find(item => item !== props.userEmail)))).image} alt=\"letsChat\" />\r\n                                                                    }\r\n                                                                </div>\r\n                                                            :   <div className=\"chat-avatar\">\r\n                                                                     {chat.sender === props.userEmail ?   <img src={(props.allUserData.find(item => item.email === props.userEmail)).image} alt=\"letsChat\" /> : \r\n                                                                         (props.allUserData.find(item => item.email === (props.chats[props.active_user].users.find(item => item !== props.userEmail)))).image === \"Null\" ?\r\n                                                                            <div className=\"chat-user-img align-self-center mr-3\">\r\n                                                                                <div className=\"avatar-xs\">\r\n                                                                                    <span className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\r\n                                                                                        {(props.allUserData.find(item => item.email === (props.chats[props.active_user].users.find(item => item !== props.userEmail)))).name.charAt(0)}\r\n                                                                                    </span>\r\n                                                                                </div>\r\n                                                                            </div>\r\n                                                                        :  <img src={(props.allUserData.find(item => item.email === (props.chats[props.active_user].users.find(item => item !== props.userEmail)))).image} alt=\"letsChat\" />\r\n                                                                    }\r\n                                                                </div>\r\n                                                        }\r\n                                                    \r\n                \r\n                                                    <div className=\"user-chat-content\">\r\n                                                        <div className=\"ctext-wrap\">\r\n                                                            <div className=\"ctext-wrap-content\">\r\n                                                                {\r\n                                                                    chat.message &&\r\n                                                                        <p className=\"mb-0\">\r\n                                                                            {chat.message}\r\n                                                                        </p>\r\n                                                                }\r\n                                                                {/* {\r\n                                                                    chat.imageMessage &&\r\n                                                                        <ImageList images={chat.imageMessage} />\r\n                                                                }\r\n                                                                {\r\n                                                                    chat.fileMessage &&\r\n                                                                        <FileList fileName={chat.fileMessage} fileSize={chat.size} />\r\n                                                                } */}\r\n                                                                {\r\n                                                                    ((props.chats[props.active_user].typing).length > 0 && (props.chats[props.active_user].typing).includes(this.props.userEmail)) ? \r\n                                                                        <p className=\"mb-0\">\r\n                                                                            typing\r\n                                                                            <span className=\"animate-typing\">\r\n                                                                                <span className=\"dot ml-1\"></span>\r\n                                                                                <span className=\"dot ml-1\"></span>\r\n                                                                                <span className=\"dot ml-1\"></span>\r\n                                                                            </span>\r\n                                                                        </p>\r\n                                                                :\r\n                                                                    <p className=\"chat-time mb-0\"> <span className=\"align-middle\">{chat.time.seconds}  <i className=\"ri-check-double-fill\"></i> </span></p>\r\n                                                                }\r\n                                                            </div>\r\n                                                                    \r\n                                                        </div>\r\n                                                        {\r\n                                                            chatMessages[key+1] ? chatMessages[key].sender === chatMessages[key+1].sender ? null :  \r\n                                                            <div className=\"conversation-name\">\r\n                                                                {chat.sender === props.userEmail ? (props.allUserData.find(item => item.email === props.userEmail)).name\r\n                                                                : (props.allUserData.find(item => item.email === (props.chats[props.active_user].users.find(item => item !== props.userEmail)))).name}</div> \r\n                                                                : <div className=\"conversation-name\">\r\n                                                                    {chat.userType === \"sender\" ? \"Admin\" \r\n                                                                    : (props.allUserData.find(item => item.email === (props.chats[props.active_user].users.find(item => item !== props.userEmail)))).name}\r\n                                                                </div>\r\n                                                        }\r\n                                                   </div>\r\n                                                </div>\r\n                                            </li>\r\n                                    ) : \"No Messages\"\r\n                                }\r\n                                 </ul>\r\n                                </SimpleBar>   \r\n                        <ChatInput onaddMessage={addMessage} />\r\n                    </div>\r\n                    <UserProfileSidebar activeUser={(props.allUserData.find(item => item.email === (props.chats[props.active_user].users.find(item => item !== props.userEmail))))} />\r\n\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { active_user } = state.Chat;\r\n    const { userSidebar } = state.Layout;\r\n    return { active_user,userSidebar };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, { openUserSidebar,setFullUser })(UserChat));\r\n\r\n","import React, {Component} from \"react\";\r\nimport ChatLeftSidebar from \"./ChatLeftSidebar\";\r\nimport UserChat from \"./UserChat/\";\r\nimport { initFirebaseBackend } from \"../../helpers/firebase\";\r\n\r\nexport default class Index extends Component {\r\n  state = {\r\n    newChatFormVisible: false,\r\n    email: null,\r\n    chats: [],\r\n    allUserData: [],\r\n    user: [],\r\n    blockList: [],\r\n  };\r\n\r\n  componentDidMount = async () => {\r\n    initFirebaseBackend().auth().onAuthStateChanged(async (user) => {\r\n      if (!user) {\r\n        this.props.history.push(\"/logout\");\r\n      } else {\r\n        try {\r\n          await this.setState({ user: user, email: user.email });\r\n          await this.getAllUsersData();\r\n          await this.getInfo(user);\r\n\r\n          await this.onlineStatusUpdate(user.email);\r\n        } catch (e) {\r\n          await this.props.history.push(\"/logout\");\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  showChatSection(){\r\n      this.setState({newChatFormVisible : true})\r\n  }\r\n\r\n  onlineStatusUpdate = async (email) => {\r\n    const id = await initFirebaseBackend().firestore().collection(\"users\").where(\"email\", \"==\", email).get().then((snapshot) => {\r\n        return snapshot.docs.map((ob) => ob.id)[0];\r\n      });\r\n\r\n    const time = setTimeout(async () => {\r\n      try {\r\n        if (id !== \"undefined\") {\r\n          await initFirebaseBackend().firestore().collection(\"users\").doc(id).update({\r\n            isonline: true,\r\n            isverify: true,\r\n          });\r\n        } else {\r\n          await this.onlineStatusUpdate();\r\n        }\r\n      } catch (e) {\r\n        console.log(e);\r\n        this.props.history.push(\"/logout\");\r\n      }\r\n\r\n      clearTimeout(time);\r\n    }, 2000);\r\n  };\r\n\r\n  getBlockList = async () => {\r\n    const { allUserData, email } = this.state;\r\n\r\n    const list = allUserData.forEach(async (obj) => {\r\n      if (obj.email === email) {\r\n        // console.log(obj.blocklist);\r\n        await this.setState({ blockList: obj.blocklist });\r\n      }\r\n    });\r\n  };\r\n\r\n  getAllUsersData = async () => {\r\n    await initFirebaseBackend().firestore().collection(\"users\").onSnapshot(async (snapshot) => {\r\n      var dt = snapshot.docs.map((docs) => docs.data());\r\n\r\n      await this.setState({ allUserData: dt });\r\n      await this.getBlockList();\r\n    });\r\n  };\r\n\r\n  getInfo = async (user, emails) => {\r\n    await initFirebaseBackend().firestore()\r\n      .collection(\"chats\")\r\n      .where(\"users\", \"array-contains\", user.email)\r\n      .onSnapshot(async (res) => {\r\n        const chats = res.docs.map((docs) => docs.data());\r\n\r\n        chats.sort((a, b) => {\r\n          if (a.time < b.time) {\r\n            return 1;\r\n          } else if (a.time > b.time) {\r\n            return -1;\r\n          } else {\r\n            return 0;\r\n          }\r\n        });\r\n\r\n        var chatList = [];\r\n\r\n        if (emails) {\r\n          chatList = await chats.filter((chats) => {\r\n            var getEmail =\r\n              chats.users[0] !== user.email ? chats.users[0] : chats.users[1];\r\n\r\n            if (emails.includes(getEmail)) {\r\n              return chats;\r\n            }\r\n          });\r\n        }\r\n\r\n        if (!emails) {\r\n          await this.setState({\r\n            email: user.email,\r\n            chats: chats,\r\n          });\r\n        } else {\r\n          await this.setState({\r\n            email: user.email,\r\n            chats: chatList,\r\n          });\r\n        }\r\n      });\r\n  };\r\n\r\n  searchChat = async (search) => {\r\n    const { email, user } = this.state;\r\n    const emails = await this.fetchSearchEmail(search, email);\r\n    await this.getInfo(user, emails);\r\n  };\r\n\r\n  fetchSearchEmail = async (search, email) => {\r\n    const emails = [];\r\n    const { allUserData } = this.state;\r\n\r\n    await allUserData.map((list) => {\r\n      if (list.name.indexOf(search) !== -1 && list.email !== email) {\r\n        emails.push(list.email);\r\n      }\r\n    });\r\n\r\n    return emails;\r\n  };\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n          <ChatLeftSidebar     \r\n            history={this.props.history}\r\n            chats={this.state.chats}\r\n            userEmail={this.state.email}\r\n            allUserData={this.state.allUserData} \r\n            />\r\n            {this.state.chats.length > 0 ?\r\n                <UserChat \r\n                    // recentChatList={users} \r\n                    history={this.props.history}\r\n                    chats={this.state.chats}\r\n                    userEmail={this.state.email}\r\n                    allUserData={this.state.allUserData} \r\n                 />\r\n                 : null\r\n            }\r\n        </React.Fragment>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}