{"version":3,"sources":["assets/images/users/avatar-1.jpg","components/CustomCollapse.js","pages/Dashboard/Tabs/Profile.js","pages/Dashboard/Tabs/Settings.js","pages/Dashboard/Tabs/Chats.js","pages/Dashboard/ChatLeftSidebar.js","components/UserProfileSidebar.js","pages/Dashboard/UserChat/UserHead.js","pages/Dashboard/UserChat/ChatInput.js","pages/Dashboard/UserChat/index.js","pages/Dashboard/index.js"],"names":["CustomCollapse","props","isOpen","toggleCollapse","Fragment","to","onClick","className","CardHeader","id","iconClass","title","Collapse","CardBody","children","Profile","Settings","useState","dropdownOpen","setDropdownOpen","isOpen1","setIsOpen1","setIsOpen2","isOpen3","setIsOpen3","isOpen4","setIsOpen4","src","userDetails","image","alt","Button","type","color","name","Dropdown","toggle","DropdownToggle","tag","isOnline","style","maxHeight","status","Card","size","email","location","description","Media","body","Input","Label","htmlFor","Chats","state","searchChat","modal","isOpenCollapse","newChatUserEmail","newChatUserMessage","isOpenAlert","errormessage","chatexistsId","filteredData","goToChat","a","setState","li","document","getElementById","this","active_user","classList","add","console","log","e","chat","preventDefault","index","chats","indexOf","activeUser","chatList","clickedItem","target","currentli","getElementsByTagName","i","length","contains","remove","k","userChat","getElementsByClassName","unread","display","initFirebaseBackend","firestore","collection","get","userSnapshot","exists","docs","map","data","includes","docid","userEmail","sort","join","doc","userExists","chatExists","createChat","msg","docId","timeStamp","Date","now","time","users","typing","messages","message","sender","set","UncontrolledTooltip","placement","Modal","centered","ModalHeader","ModalBody","Form","FormGroup","Alert","value","onChange","placeholder","ModalFooter","createNewChat","bind","InputGroup","InputGroupAddon","addonType","handleChange","key","openUserChat","allUserData","list","trim","seconds","React","Component","connect","Chat","setconversationNameInOpenChat","Layout","activeTab","TabContent","TabPane","tabId","history","find","item","userSidebar","closeUserSidebar","charAt","openUserSidebar","setFullUser","dropdownOpen1","setDropdownOpen1","Row","Col","sm","xs","closeUserChat","DropdownMenu","right","DropdownItem","ChatInput","textMessage","settextMessage","file","setfile","fileImage","setfileImage","getCurrentTypingData","finalData","push","update","then","obj","dt","focus","blur","filter","ob","onSubmit","onaddMessage","noGutters","onFocus","onBlur","withRouter","ref","useRef","chatMessages","setchatMessages","useEffect","current","recalculate","el","getScrollElement","scrollTop","scrollHeight","addMessage","timestamp","f","FieldValue","arrayUnion","scrolltoBottom","Index","newChatFormVisible","user","blockList","componentDidMount","auth","onAuthStateChanged","getAllUsersData","getInfo","onlineStatusUpdate","where","snapshot","setTimeout","clearTimeout","onSnapshot","emails","res","b","getEmail","search","fetchSearchEmail"],"mappings":"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","file":"static/js/9.b749f285.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/avatar-1.3921191a.jpg\";","import React from 'react';\r\nimport { Collapse, CardBody, CardHeader } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction CustomCollapse(props) {\r\n    const { isOpen, toggleCollapse } = props;\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Link to=\"#\" onClick={toggleCollapse} className=\"text-dark\" >\r\n                <CardHeader id=\"profile-user-headingOne\">\r\n                    <h5 className=\"font-size-14 m-0\">\r\n                        {\r\n                            props.iconClass &&<i className={props.iconClass + \" mr-2 align-middle d-inline-block\"}></i>\r\n                        }\r\n                         {(props.title)}\r\n                        <i className={isOpen ? \"mdi mdi-chevron-up float-right accor-plus-icon\" \r\n                            : \"mdi mdi-chevron-right float-right accor-plus-icon\"}></i>\r\n                    </h5>\r\n                </CardHeader>\r\n            </Link>\r\n\r\n            <Collapse isOpen={isOpen}>\r\n                <CardBody>\r\n                    {props.children}\r\n                </CardBody>\r\n            </Collapse>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default CustomCollapse;","import React, { useState } from 'react';\r\nimport { Card } from \"reactstrap\";\r\nimport CustomCollapse from \"../../../components/CustomCollapse\";\r\n\r\nfunction Profile(props) {\r\n    const [isOpen1, setIsOpen1] = useState(true);\r\n    const toggleCollapse1 = () => {\r\n        setIsOpen1(!isOpen1);\r\n    };\r\n    console.log(props)\r\n    return (\r\n        <React.Fragment>\r\n            <div>\r\n                            <div className=\"px-4 pt-4\">\r\n                                <h4 className=\"mb-0\">{('My Profile')}</h4>\r\n                            </div>\r\n\r\n                            <div className=\"text-center p-4 border-bottom\">\r\n                                <div className=\"mb-4\">\r\n                                    <img src={props.userDetails.image} className=\"rounded-circle avatar-lg img-thumbnail\" alt=\"letschat\" />\r\n                                </div>\r\n\r\n                                <h5 className=\"font-size-16 mb-1 text-truncate\">{props.userDetails.name}</h5>\r\n                                <p className=\"text-muted text-truncate mb-1\"><i className=\"ri-record-circle-fill font-size-10 text-success mr-1 d-inline-block\"></i> {props.userDetails.isOnline ? ('Active') : ('Away')}</p>\r\n                            </div>\r\n                            <div className=\"p-4 user-profile-desc\">\r\n                                <div className=\"text-muted text-center\">\r\n                                    <p className=\"mb-4\">{props.userDetails.status !== \"\" ? props.userDetails.status : \"Status not available\"}</p>\r\n                                </div>\r\n                                <div id=\"profile-user-accordion-1\" className=\"custom-accordion\">\r\n                                    <Card className=\"shadow-none border mb-2\">\r\n                                        {/* import collaps */}\r\n                                        <CustomCollapse\r\n                                            title = \"About\"\r\n                                            iconClass = \"ri-user-2-line\"\r\n                                            isOpen={isOpen1}\r\n                                            toggleCollapse={toggleCollapse1}\r\n                                        >\r\n                                                <div>\r\n                                                    <p className=\"text-muted mb-1\">{('Name')}</p>\r\n                                                    <h5 className=\"font-size-14\">{props.userDetails.name !== \"\" ? props.userDetails.name : \"No Name\"}</h5>\r\n                                                </div>\r\n\r\n                                                <div className=\"mt-4\">\r\n                                                    <p className=\"text-muted mb-1\">{('Email')}</p>\r\n                                                    <h5 className=\"font-size-14\">{props.userDetails.email !== \"\" ? props.userDetails.email : \"No Email\"}</h5>\r\n                                                </div>\r\n\r\n                                                <div className=\"mt-4\">\r\n                                                    <p className=\"text-muted mb-1\">{('Location')}</p>\r\n                                                    <h5 className=\"font-size-14\">{props.userDetails.location !== \"\" ? props.userDetails.location : \"Location Not Available\"}</h5>\r\n                                                </div>\r\n\r\n                                                <div className=\"mt-4\">\r\n                                                    <p className=\"text-muted mb-1\">{('Description')}</p>\r\n                                                    <h5 className=\"font-size-14 mb-0\">{props.userDetails.description !== \"\" ? props.userDetails.description : \"Description Not Available\"}</h5>\r\n                                                </div>\r\n                                        </CustomCollapse>\r\n                                    </Card>\r\n                                   </div>\r\n                              </div>\r\n                        </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React, { useState } from 'react';\r\nimport { Dropdown, DropdownMenu, DropdownItem, DropdownToggle, Card, Media, Button, UncontrolledDropdown, Input, Label } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport SimpleBar from \"simplebar-react\";\r\nimport CustomCollapse from \"../../../components/CustomCollapse\";\r\nimport avatar1 from \"../../../assets/images/users/avatar-1.jpg\";\r\n\r\nfunction Settings(props) {\r\n    const [dropdownOpen, setDropdownOpen] = useState(false);\r\n    const [isOpen1, setIsOpen1] = useState(true);\r\n    const [isOpen2, setIsOpen2] = useState(false);\r\n    const [isOpen3, setIsOpen3] = useState(false);\r\n    const [isOpen4, setIsOpen4] = useState(false);\r\n\r\n    const toggleCollapse1 = () => {\r\n        setIsOpen1(!isOpen1);\r\n        setIsOpen2(false);\r\n        setIsOpen3(false);\r\n        setIsOpen4(false);\r\n    };\r\n\r\n    const toggleCollapse2 = () => {\r\n        setIsOpen2(!isOpen2);\r\n        setIsOpen1(false);\r\n        setIsOpen3(false);\r\n        setIsOpen4(false);\r\n    };\r\n\r\n    const toggleCollapse3 = () => {\r\n        setIsOpen3(!isOpen3);\r\n        setIsOpen1(false);\r\n        setIsOpen2(false);\r\n        setIsOpen4(false);\r\n    };\r\n\r\n    const toggleCollapse4 = () => {\r\n        setIsOpen4(!isOpen4);\r\n        setIsOpen1(false);\r\n        setIsOpen3(false);\r\n        setIsOpen2(false);\r\n    };\r\n\r\n    const toggle = () => setDropdownOpen(!dropdownOpen);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div>\r\n                            <div className=\"px-4 pt-4\">\r\n                                <h4 className=\"mb-0\">{('Settings')}</h4>\r\n                            </div>\r\n\r\n                            <div className=\"text-center border-bottom p-4\">\r\n                                <div className=\"mb-4 profile-user\">\r\n                                    <img src={props.userDetails.image} className=\"rounded-circle avatar-lg img-thumbnail\" alt=\"letschat\" />\r\n                                    <Button type=\"button\" color=\"light\" className=\"avatar-xs p-0 rounded-circle profile-photo-edit\">\r\n                                        <i className=\"ri-pencil-fill\"></i>\r\n                                    </Button>   \r\n                                    \r\n                                </div>\r\n\r\n                                <h5 className=\"font-size-16 mb-1 text-truncate\">{props.userDetails.name}</h5>\r\n                                <Dropdown isOpen={dropdownOpen} toggle={toggle} className=\"d-inline-block mb-1\">\r\n                                    <DropdownToggle tag=\"a\" className=\"text-muted pb-1 d-block\" >\r\n                                    {props.userDetails.isOnline ? ('Active') : ('Away')} <i className=\"mdi mdi-chevron-down\"></i>\r\n                                    </DropdownToggle>\r\n\r\n                                    {/* <DropdownMenu>\r\n                                        <DropdownItem>{('Available')}</DropdownItem>\r\n                                        <DropdownItem>{('Busy')}</DropdownItem>\r\n                                    </DropdownMenu> */}\r\n                                </Dropdown>\r\n                            </div>\r\n                            {/* End profile user */}\r\n\r\n                            {/* Start User profile description */}\r\n                            <SimpleBar style={{ maxHeight: \"100%\" }} className=\"p-4 user-profile-desc\">\r\n                            <div className=\"text-muted text-center\">\r\n                                    <p className=\"mb-4\">{props.userDetails.status !== \"\" ? props.userDetails.status : \"No Status\"}</p>\r\n                                </div>\r\n                                <div id=\"profile-setting-accordion\" className=\"custom-accordion\">\r\n                                    <Card className=\"shadow-none border mb-2\">\r\n                                        <CustomCollapse\r\n                                            title = \"Personal Info\"\r\n                                            isOpen={isOpen1}\r\n                                            toggleCollapse={toggleCollapse1}\r\n                                        >\r\n\r\n                                                <div className=\"float-right\">\r\n                                                    <Button color=\"light\" size=\"sm\" type=\"button\" ><i className=\"ri-edit-fill mr-1 align-middle\"></i> {('Edit')}</Button>\r\n                                                </div>\r\n\r\n                                                <div>\r\n                                                    <p className=\"text-muted mb-1\">{('Name')}</p>\r\n                                                    <h5 className=\"font-size-14\">{props.userDetails.name !== \"\" ? props.userDetails.name : \"No Name\"}</h5>\r\n                                                </div>\r\n\r\n                                                <div className=\"mt-4\">\r\n                                                    <p className=\"text-muted mb-1\">{('Email')}</p>\r\n                                                    <h5 className=\"font-size-14\">{props.userDetails.email !== \"\" ? props.userDetails.email : \"No Email\"}</h5>\r\n                                                </div>\r\n\r\n                                                <div className=\"mt-4\">\r\n                                                    <p className=\"text-muted mb-1\">{('Location')}</p>\r\n                                                    <h5 className=\"font-size-14\">{props.userDetails.location !== \"\" ? props.userDetails.location : \"Location Not Available\"}</h5>\r\n                                                </div>\r\n\r\n                                                <div className=\"mt-4\">\r\n                                                    <p className=\"text-muted mb-1\">{('Description')}</p>\r\n                                                    <h5 className=\"font-size-14 mb-0\">{props.userDetails.description !== \"\" ? props.userDetails.description : \"Description Not Available\"}</h5>\r\n                                                </div>\r\n                                        </CustomCollapse>\r\n                                    </Card>\r\n                                    {/* end profile card */}\r\n\r\n                                    <Card className=\"shadow-none border mb-2\">\r\n                                        {/* <CustomCollapse\r\n                                            title = \"Privacy\"\r\n                                            isOpen={isOpen2}\r\n                                            toggleCollapse={toggleCollapse2}\r\n                                        >\r\n\r\n                                                <div className=\"py-3\">\r\n                                                    <Media className=\"align-items-center\">\r\n                                                        <Media body className=\"overflow-hidden\">\r\n                                                            <h5 className=\"font-size-13 mb-0 text-truncate\">{('Profile photo')}</h5>\r\n                                                        </Media>\r\n                                                        <UncontrolledDropdown className=\"ml-2\">\r\n                                                            <DropdownToggle className=\"btn btn-light btn-sm w-sm\" tag=\"button\">\r\n                                                                {('Everyone')} <i className=\"mdi mdi-chevron-down\"></i>\r\n                                                            </DropdownToggle>\r\n                                                            <DropdownMenu right>\r\n                                                                <DropdownItem>{('Everyone')}</DropdownItem>\r\n                                                                <DropdownItem>{('selected')}</DropdownItem>\r\n                                                                <DropdownItem>{('Nobody')}</DropdownItem>\r\n                                                            </DropdownMenu>\r\n                                                        </UncontrolledDropdown>\r\n                                                    </Media>\r\n                                                </div>\r\n                                                <div className=\"py-3 border-top\">\r\n                                                    <Media className=\"align-items-center\">\r\n                                                        <Media body className=\"overflow-hidden\">\r\n                                                            <h5 className=\"font-size-13 mb-0 text-truncate\">{('Last seen')}</h5>\r\n\r\n                                                        </Media>\r\n                                                        <div className=\"ml-2\">\r\n                                                            <div className=\"custom-control custom-switch\">\r\n                                                                <Input type=\"checkbox\" className=\"custom-control-input\" id=\"privacy-lastseenSwitch\" defaultChecked />\r\n                                                                <Label className=\"custom-control-label\" htmlFor=\"privacy-lastseenSwitch\"></Label>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </Media>\r\n                                                </div>\r\n\r\n                                                <div className=\"py-3 border-top\">\r\n                                                    <Media className=\"align-items-center\">\r\n                                                        <Media body className=\"overflow-hidden\">\r\n                                                            <h5 className=\"font-size-13 mb-0 text-truncate\">{('Status')}</h5>\r\n\r\n                                                        </Media>\r\n                                                        <UncontrolledDropdown className=\"ml-2\">\r\n                                                            <DropdownToggle className=\"btn btn-light btn-sm w-sm\" tag=\"button\">\r\n                                                                {('Everyone')} <i className=\"mdi mdi-chevron-down\"></i>\r\n                                                            </DropdownToggle>\r\n                                                            <DropdownMenu right>\r\n                                                                <DropdownItem>{('Everyone')}</DropdownItem>\r\n                                                                <DropdownItem>{('selected')}</DropdownItem>\r\n                                                                <DropdownItem>{('Nobody')}</DropdownItem>\r\n                                                            </DropdownMenu>\r\n                                                        </UncontrolledDropdown>\r\n                                                    </Media>\r\n                                                </div>\r\n\r\n                                                <div className=\"py-3 border-top\">\r\n                                                    <Media className=\"align-items-center\">\r\n                                                        <Media body className=\"overflow-hidden\">\r\n                                                            <h5 className=\"font-size-13 mb-0 text-truncate\">{('Read receipts')}</h5>\r\n\r\n                                                        </Media>\r\n                                                        <div className=\"ml-2\">\r\n                                                            <div className=\"custom-control custom-switch\">\r\n                                                                <Input type=\"checkbox\" className=\"custom-control-input\" id=\"privacy-readreceiptSwitch\" defaultChecked />\r\n                                                                <Label className=\"custom-control-label\" htmlFor=\"privacy-readreceiptSwitch\"></Label>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </Media>\r\n                                                </div>\r\n                        \r\n                                                <div className=\"py-3 border-top\">\r\n                                                    <Media className=\"align-items-center\">\r\n                                                        <Media body className=\"overflow-hidden\">\r\n                                                            <h5 className=\"font-size-13 mb-0 text-truncate\">{('Groups')}</h5>\r\n\r\n                                                        </Media>\r\n                                                        <UncontrolledDropdown className=\"ml-2\">\r\n                                                            <DropdownToggle className=\"btn btn-light btn-sm w-sm\" tag=\"button\">\r\n                                                                {('Everyone')} <i className=\"mdi mdi-chevron-down\"></i>\r\n                                                            </DropdownToggle>\r\n                                                            <DropdownMenu right>\r\n                                                                <DropdownItem>{('Everyone')}</DropdownItem>\r\n                                                                <DropdownItem>{('selected')}</DropdownItem>\r\n                                                                <DropdownItem>{('Nobody')}</DropdownItem>\r\n                                                            </DropdownMenu>\r\n                                                        </UncontrolledDropdown>\r\n                                                    </Media>\r\n                                                </div>\r\n                                        </CustomCollapse> */}\r\n                                    </Card>\r\n                                    {/* end Privacy card */}\r\n\r\n                                    <Card className=\"shadow-none border mb-2\">\r\n                                        <CustomCollapse\r\n                                            title = \"Security\"\r\n                                            isOpen={isOpen3}\r\n                                            toggleCollapse={toggleCollapse3}\r\n                                        >\r\n\r\n                                                <div>\r\n                                                    <Media className=\"align-items-center\">\r\n                                                        <Media body className=\"overflow-hidden\">\r\n                                                            <h5 className=\"font-size-13 mb-0 text-truncate\">{('Deactivate Account')}</h5>\r\n\r\n                                                        </Media>\r\n                                                        <div className=\"ml-2\">\r\n                                                            <div className=\"custom-control custom-switch\">\r\n                                                                <Input type=\"checkbox\" className=\"custom-control-input\" id=\"security-notificationswitch\" />\r\n                                                                <Label className=\"custom-control-label\" htmlFor=\"security-notificationswitch\"></Label>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </Media>\r\n                                                </div>\r\n                                        </CustomCollapse>\r\n                                    </Card>\r\n                                    {/* end Security card */}\r\n\r\n                                    <Card className=\"shadow-none border mb-2\">\r\n                                        <CustomCollapse\r\n                                            title = \"Help\"\r\n                                            isOpen={isOpen4}\r\n                                            toggleCollapse={toggleCollapse4}\r\n                                        >\r\n\r\n                                                <div>\r\n                                                    <div className=\"py-3\">\r\n                                                        <h5 className=\"font-size-13 mb-0\"><Link to=\"#\" className=\"text-body d-block\">{('FAQs')}</Link></h5>\r\n                                                    </div>\r\n                                                    <div className=\"py-3 border-top\">\r\n                                                        <h5 className=\"font-size-13 mb-0\"><Link to=\"#\" className=\"text-body d-block\">{('Contact')}</Link></h5>\r\n                                                    </div>\r\n                                                    <div className=\"py-3 border-top\">\r\n                                                        <h5 className=\"font-size-13 mb-0\"><Link to=\"#\" className=\"text-body d-block\">{('Terms & Privacy policy')}</Link></h5>\r\n                                                    </div>\r\n                                                </div>\r\n                                        </CustomCollapse>\r\n                                    </Card>\r\n                                    {/* end Help card */}\r\n                                </div>\r\n                                {/* end profile-setting-accordion */}\r\n                            </SimpleBar>\r\n                            {/* End User profile description */}\r\n                        </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Settings;","import React from 'react';\r\nimport { Input, InputGroupAddon, InputGroup, Media, Button, UncontrolledTooltip } from \"reactstrap\";\r\nimport {  Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Label,  Alert } from 'reactstrap';\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport SimpleBar from \"simplebar-react\";\r\nimport { setconversationNameInOpenChat, activeUser } from \"../../../redux/actions\"\r\nimport { initFirebaseBackend } from \"../../../helpers/firebase\";\r\n\r\n// import OnlineUsers from \"./OnlineUsers\";\r\n\r\nclass Chats extends React.Component {\r\n    state = { \r\n        searchChat : \"\",\r\n        modal : false,\r\n        isOpenCollapse : false, \r\n        newChatUserEmail: \"\",\r\n        newChatUserMessage: \"\",\r\n        isOpenAlert: false,\r\n        errormessage:\"\",\r\n        chatexistsId: \"\",\r\n        filteredData:[]\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        var li = document.getElementById(\"conversation\" + this.props.active_user);\r\n        // var li = document.getElementById(\"conversation0\");\r\n        if(li){\r\n            li.classList.add(\"active\");\r\n        }\r\n    }\r\n\r\n    // handleChange(e)  {\r\n    //     this.setState({ searchChat : e.target.value });\r\n    //     var search = e.target.value;\r\n    //     let filteredArray = [];\r\n    //     this.props.chats.map((chat) =>\r\n    //         this.props.allUserData.forEach((list) => {\r\n    //             if (list.email === (chat.users[0] !== this.props.userEmail ? chat.users[0] : chat.users[1])) {\r\n    //                 if(list.name.toLowerCase().includes(search) || list.name.toUpperCase().includes(search)){\r\n    //                     filteredArray.push(list.email);\r\n    //                 }\r\n    //             }\r\n    //         })\r\n    //     )\r\n\r\n    //     this.setState({ filteredData : filteredArray })\r\n    //     if(search === \"\") this.setState({ filteredData : [] })\r\n    // }\r\n\r\n    toggle() {\r\n        console.log(this.state)\r\n        this.setState({ modal : !this.state.modal });\r\n    }\r\n\r\n    toggleCollapse() {\r\n        this.setState({ isOpenCollapse : !this.state.isOpenCollapse });\r\n    }\r\n\r\n    openUserChat(e,chat) {\r\n        e.preventDefault();\r\n        //find index of current chat in array\r\n        var index = this.props.chats.indexOf(chat);\r\n        this.props.activeUser(index);\r\n        var chatList = document.getElementById(\"chat-list\");\r\n        var clickedItem = e.target;\r\n        var currentli = null;\r\n\r\n        if(chatList) {\r\n            var li = chatList.getElementsByTagName(\"li\");\r\n            //remove coversation user\r\n            for(var i=0; i<li.length; ++i){\r\n                if(li[i].classList.contains('active')){\r\n                    li[i].classList.remove('active');\r\n                }\r\n            }\r\n            //find clicked conversation user\r\n            for(var k=0; k<li.length; ++k){\r\n                if(li[k].contains(clickedItem)) {\r\n                    currentli = li[k];\r\n                    break;\r\n                } \r\n            }\r\n        }\r\n\r\n        //activation of clicked coversation user\r\n        if(currentli) {\r\n            currentli.classList.add('active');\r\n        }\r\n\r\n        var userChat = document.getElementsByClassName(\"user-chat\");\r\n        if(userChat) {\r\n            userChat[0].classList.add(\"user-chat-show\");\r\n        }\r\n\r\n        //removes unread badge if user clicks\r\n        var unread = document.getElementById(\"unRead\" + chat.id);\r\n        if(unread) {\r\n            unread.style.display=\"none\";\r\n        }\r\n    }\r\n    async userExists() {\r\n        const userSnapshot = await initFirebaseBackend().firestore().collection(\"users\").get();\r\n        try {\r\n          const exists = userSnapshot.docs.map((docs) => docs.data().email).includes(this.state.newChatUserEmail);\r\n          return exists;\r\n        } catch (e) {\r\n          console.log(e);\r\n          return false;\r\n        }\r\n      };\r\n\r\n      async chatExists () {\r\n        const docid = [this.state.newChatUserEmail, this.props.userEmail].sort().join(\":\");\r\n        const chat = await initFirebaseBackend().firestore().collection(\"chats\").doc(docid).get();\r\n        return chat.exists;\r\n      };\r\n\r\n    goToChat = async () => {\r\n        this.setState({errormessage: \"Chat Already Exists\",isOpenAlert : true })\r\n    };\r\n\r\n    async createNewChat(){\r\n        const userExists = await this.userExists();\r\n        const { newChatUserEmail, newChatUserMessage } = this.state;\r\n        const { userEmail } = this.props;\r\n\r\n        if (newChatUserEmail && newChatUserMessage && newChatUserEmail !== userEmail) {\r\n            if (userExists) {\r\n              const chatExists = await this.chatExists();\r\n              try {\r\n                  if(chatExists){\r\n                    this.goToChat() \r\n                  } else{\r\n                    this.createChat(userEmail, newChatUserEmail, newChatUserMessage);\r\n                    this.setState({ modal : !this.state.modal });\r\n                  }\r\n              } catch (e) {\r\n                console.log(e);\r\n              }\r\n            } else {\r\n              this.setState({errormessage: \"User Is not registered\",isOpenAlert : true })\r\n            }\r\n          } else {\r\n            this.setState({errormessage: \"Please Enter Valid Data\",isOpenAlert : true })\r\n          }\r\n    }\r\n\r\n    async createChat(userEmail, email, msg)  {\r\n        const docId = [this.state.newChatUserEmail, this.props.userEmail].sort().join(\":\");\r\n        const timeStamp = Date.now();\r\n        const time = Date.now();\r\n\r\n        console.log({\r\n            docid: docId,\r\n            time: timeStamp,\r\n            users: [userEmail, email],\r\n            typing: [],\r\n            messages: [\r\n              {\r\n                message: msg,\r\n                sender: userEmail,\r\n                time: time,\r\n                type: \"text\",\r\n              },\r\n            ],\r\n          })\r\n        await initFirebaseBackend().firestore().collection(\"chats\").doc(docId).set({\r\n            docid: docId,\r\n            time: timeStamp,\r\n            users: [userEmail, email],\r\n            typing: [],\r\n            messages: [\r\n              {\r\n                message: msg,\r\n                sender: userEmail,\r\n                time: time,\r\n                type: \"text\",\r\n              },\r\n            ],\r\n          });\r\n      };\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                        <div>\r\n                            <div className=\"px-4 pt-4\">\r\n                            <div className=\"user-chat-nav float-right\">\r\n                                    <div  id=\"create-chat\">\r\n                                        {/* Button trigger modal */}\r\n                                        <Button onClick={() => this.setState({ modal : !this.state.modal })} type=\"button\" color=\"link\" className=\"text-decoration-none text-muted font-size-18 py-0\">\r\n                                        <i className=\"ri-message-3-line ri-xl\"></i>\r\n                                        </Button>\r\n                                    </div>\r\n                                    <UncontrolledTooltip target=\"create-chat\" placement=\"bottom\">\r\n                                        New Chat\r\n                                    </UncontrolledTooltip>\r\n                                </div>\r\n\r\n                                <Modal isOpen={this.state.modal} centered toggle={() => this.setState({ modal : !this.state.modal })}>\r\n                                    <ModalHeader tag=\"h5\" className=\"modal-title font-size-16\" toggle={() => this.setState({ modal : !this.state.modal })}>{('Start New Chat')}</ModalHeader>\r\n                                    <ModalBody className=\"p-4\">\r\n                                        <Form>\r\n                                            <FormGroup className=\"mb-4\">\r\n                                                 <Alert isOpen={this.state.isOpenAlert} color=\"danger\">\r\n                                                    {this.state.errormessage}\r\n                                                </Alert>\r\n                                                <Label htmlFor=\"newchatemail-input\">{('User Email Id')}</Label>\r\n                                                <Input type=\"text\" className=\"form-control\" id=\"newchatemail-input\" value={this.state.newChatUserEmail} onChange={(e) => this.setState({newChatUserEmail:e.target.value})} placeholder=\"Enter User Email ID\" />\r\n                                            </FormGroup>\r\n                                            <FormGroup>\r\n                                                <Label htmlFor=\"newChatmessage-input\">{('Message')}</Label>\r\n                                                <Input type=\"text\" className=\"form-control\" id=\"newChatmessage-input\" value={this.state.newChatUserMessage} onChange={(e) => this.setState({newChatUserMessage:e.target.value})} placeholder=\"Enter Message\" />\r\n                                            </FormGroup>\r\n                                        </Form>\r\n                                    </ModalBody>\r\n                                    <ModalFooter>\r\n                                        <Button type=\"button\" color=\"link\" onClick={() => this.setState({ modal : !this.state.modal })}>{('Close')}</Button>\r\n                                        <Button type=\"button\" color=\"primary\" onClick={this.createNewChat.bind(this)}>{('Start Chatting')}</Button>\r\n                                    </ModalFooter>\r\n                                </Modal>\r\n\r\n                                <h4 className=\"mb-4\">Chats</h4>\r\n                                <div className=\"search-box chat-search-box\">\r\n                                    <InputGroup size=\"lg\" className=\"mb-3 bg-light rounded-lg\">\r\n                                        <InputGroupAddon addonType=\"prepend\">\r\n                                            <Button color=\"link\" className=\"text-muted pr-1 text-decoration-none\" type=\"button\">\r\n                                                <i className=\"ri-search-line search-icon font-size-18\"></i>\r\n                                            </Button>\r\n                                        </InputGroupAddon>\r\n                                        <Input type=\"text\" value={this.state.searchChat} onChange={(e) => this.handleChange(e)} className=\"form-control bg-light\" placeholder=\"Search messages or users\" />\r\n                                    </InputGroup> \r\n                                </div>\r\n                                {/* Search Box */}\r\n                            </div> \r\n\r\n                            {/* Start chat-message-list  */}\r\n                            <div className=\"px-2\">\r\n                                <h5 className=\"mb-3 px-3 font-size-16\">Recent</h5>\r\n                                <SimpleBar style={{ maxHeight: \"100%\" }} className=\"chat-message-list\">\r\n                                    <ul className=\"list-unstyled chat-list chat-user-list\" id=\"chat-list\">\r\n                                        {this.props.chats.length > 0 ?\r\n                                            this.props.chats.map((chat, key) =>\r\n                                                // { (this.state.filteredData.length > 0) && (this.state.filteredData.includes(chat.users[0] !== this.props.userEmail ? chat.users[0]: chat.users[1])) ?\r\n                                                    <li key={key} id={\"conversation\" + key} \r\n                                                className={\r\n                                                    // chat.unRead ? \"unread\" : chat.isTyping ?  \"typing\" : \r\n                                                     key === this.props.active_user ? \"active\" : \"\"}\r\n                                                >\r\n                                                    <Link to=\"#\" onClick={(e) => this.openUserChat(e, chat)}>\r\n                                                        <Media>\r\n                                                            {\r\n                                                                <div className={\"chat-user-img \" + chat.status +\" align-self-center mr-3\"}>\r\n                                                                    <img src={this.props.allUserData.map((list) => {\r\n                                                                                if ( list.email ===(chat.users[0] !== this.props.userEmail ? chat.users[0] : chat.users[1])) {\r\n                                                                                    return list.image;\r\n                                                                                } else {  return \"\"; }\r\n                                                                            }).join(\"\").trim(\"\")} className=\"rounded-circle avatar-xs\" alt=\"letschat\" />\r\n                                                                    {\r\n                                                                        chat.status &&  <span className=\"user-status\"></span>\r\n                                                                    }\r\n                                                                </div>\r\n                                                            }\r\n                                                            \r\n                                                            <Media body className=\"overflow-hidden\">\r\n                                                                <h5 className=\"text-truncate font-size-15 mb-1\">\r\n                                                                    {this.props.allUserData.map((list) => {\r\n                                                                        if (list.email === (chat.users[0] !== this.props.userEmail ? chat.users[0] : chat.users[1])) {\r\n                                                                            return list.name;\r\n                                                                        }\r\n                                                                        else{\r\n                                                                            return \"\"\r\n                                                                        }\r\n                                                                    })}\r\n                                                                </h5>\r\n                                                                <p className=\"chat-user-message text-truncate mb-0\">\r\n                                                                    {\r\n                                                                        ((chat.typing).length > 0 && (chat.typing).includes((chat.users[0] !== this.props.userEmail ? chat.users[0] : chat.users[1]))) ?\r\n                                                                        <>\r\n                                                                            <span className=\"animate-typing\" style={{color: \"#7269ef\"}}>typing\r\n                                                                            <span className=\"dot ml-1\" style={{color: \"#7269ef\"}}></span>\r\n                                                                            <span className=\"dot ml-1\" style={{color: \"#7269ef\"}}></span>\r\n                                                                            <span className=\"dot ml-1\" style={{color: \"#7269ef\"}}></span>\r\n                                                                        </span>\r\n                                                                        </>\r\n                                                                        :\r\n                                                                        <>\r\n                                                                            {/* {\r\n                                                                                chat.messages && (chat.messages.length > 0 && chat.messages[(chat.messages).length - 1].isImageMessage === true) ? <i className=\"ri-image-fill align-middle mr-1\"></i> : null\r\n                                                                            }\r\n                                                                            {\r\n                                                                                chat.messages && (chat.messages.length > 0  && chat.messages[(chat.messages).length - 1].isFileMessage === true) ? <i className=\"ri-file-text-fill align-middle mr-1\"></i> : null\r\n                                                                            } */}\r\n                                                                            {chat.messages && chat.messages.length > 0 ?  chat.messages[(chat.messages).length - 1].message : null}\r\n                                                                       </>\r\n                                                                    }\r\n\r\n                                                    \r\n                                                                    \r\n                                                                </p>\r\n                                                            </Media>\r\n                                                            {/* {console.log(chat.messages[(chat.messages).length - 1].time.seconds)} */}\r\n                                                            <div className=\"font-size-11\">{chat.messages && chat.messages.length > 0 ?  (chat.messages[(chat.messages).length - 1].time.seconds) : null}</div>\r\n                                                            {/* {chat.unRead === 0 ? null :\r\n                                                                <div className=\"unread-message\" id={\"unRead\" + chat.id}>\r\n                                                                    <span className=\"badge badge-soft-danger badge-pill\">{chat.messages && chat.messages.length > 0 ? chat.unRead >= 20 ? chat.unRead + \"+\" : chat.unRead  : \"\"}</span>\r\n                                                                </div>\r\n                                                            }  */}\r\n                                                        </Media>\r\n                                                    </Link>\r\n                                                </li>\r\n                                            ) : \"No Chats Available\"\r\n                                        }\r\n                                    </ul>\r\n                                    </SimpleBar>\r\n                                    \r\n                            </div>\r\n                        </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { active_user } = state.Chat;\r\n    return { active_user };\r\n};\r\n\r\nexport default connect(mapStateToProps, { setconversationNameInOpenChat, activeUser })(Chats);\r\n// export default Chats;","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { TabContent, TabPane } from \"reactstrap\";\r\n\r\nimport Profile from \"./Tabs/Profile\";\r\n// import Groups from \"./Tabs/Groups\";\r\n// import Contacts from \"./Tabs/Contacts\";\r\nimport Settings from \"./Tabs/Settings\";\r\nimport Chats from \"./Tabs/Chats\";\r\n\r\nfunction ChatLeftSidebar(props) {\r\n\r\n    const activeTab = props.activeTab;\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"chat-leftsidebar mr-lg-1\">\r\n\r\n                <TabContent activeTab={activeTab}>\r\n                    {/* <TabPane tabId=\"profile\" id=\"pills-user\">\r\n                        <Profile userDetails = {props.allUserData.find(item => item.email === props.userEmail)} />\r\n                    </TabPane> */}\r\n\r\n                    <TabPane tabId=\"chat\" id=\"pills-chat\">\r\n                        <Chats      \r\n                            history={props.history}\r\n                            chats={props.chats}\r\n                            userEmail={props.userEmail}\r\n                            allUserData={props.allUserData}\r\n                        />\r\n                    </TabPane>\r\n\r\n                    {/* <TabPane tabId=\"group\" id=\"pills-groups\">\r\n                        <Groups />\r\n                    </TabPane>\r\n\r\n                    <TabPane tabId=\"contacts\" id=\"pills-contacts\">\r\n                        <Contacts />\r\n                    </TabPane>*/}\r\n\r\n                    <TabPane tabId=\"settings\" id=\"pills-setting\">\r\n                        <Settings userDetails = {props.allUserData.find(item => item.email === props.userEmail)} />\r\n                    </TabPane> \r\n                </TabContent>\r\n\r\n                </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nconst mapStatetoProps = state => {\r\n    return {\r\n      ...state.Layout\r\n    };\r\n};\r\n\r\nexport default connect(mapStatetoProps, null)(ChatLeftSidebar);","import React, { useState } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { Button, Card} from \"reactstrap\";\r\nimport SimpleBar from \"simplebar-react\";\r\n\r\nimport CustomCollapse from \"./CustomCollapse\";\r\nimport { closeUserSidebar } from \"../redux/actions\";\r\n\r\n\r\nfunction UserProfileSidebar(props) {\r\n    const [isOpen1, setIsOpen1] = useState(true);\r\n\r\n    const toggleCollapse1 = () => {\r\n        setIsOpen1(!isOpen1);\r\n    };\r\n\r\n    // closes sidebar\r\n    const closeuserSidebar=()=> {\r\n        props.closeUserSidebar();\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n           <div style={{display: (props.userSidebar === true)  ? \"block\" : \"none\"}} className=\"user-profile-sidebar\">\r\n                        <div className=\"px-3 px-lg-4 pt-3 pt-lg-4\">\r\n                            <div className=\"user-chat-nav text-right\">\r\n                                <Button color=\"none\" type=\"button\" onClick={closeuserSidebar} className=\"nav-btn\" id=\"user-profile-hide\">\r\n                                    <i className=\"ri-close-line\"></i>\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"text-center p-4 border-bottom\">\r\n\r\n                            <div className=\"mb-4 d-flex justify-content-center\">\r\n                                {\r\n                                    props.activeUser.image ===\"Null\" ?\r\n                                        <div className=\"avatar-lg\">\r\n                                            <span className=\"avatar-title rounded-circle bg-soft-primary text-primary font-size-24\">\r\n                                                {props.activeUser.name.charAt(0)}\r\n                                            </span>\r\n                                        </div>\r\n                                    : <img src={props.activeUser.image} className=\"rounded-circle avatar-lg img-thumbnail\" alt=\"letschat\" />\r\n                                }\r\n                                \r\n                            </div>\r\n\r\n                            <h5 className=\"font-size-16 mb-1 text-truncate\">{props.activeUser.name}</h5>\r\n                            <p className=\"text-muted text-truncate mb-1\">\r\n                            {\r\n                                props.activeUser ? <> <i className=\"ri-record-circle-fill font-size-10 text-success mr-1\"></i> </>\r\n                                                :  <> <i className=\"ri-record-circle-fill font-size-10 text-secondary mr-1\"></i></>\r\n                            }\r\n                                Active</p>\r\n                        </div>\r\n   \r\n                        <SimpleBar style={{ maxHeight: \"100%\" }} className=\"p-4 user-profile-desc\">\r\n                            <div className=\"text-muted\">\r\n                                <p className=\"mb-4\">\"{('If several languages coalesce, the grammar of the resulting language is more simple and regular than that of the individual.')}\"</p>\r\n                            </div>\r\n\r\n                            <div id=\"profile-user-accordion\" className=\"custom-accordion\">\r\n                                <Card className=\"shadow-none border mb-2\">\r\n                                    {/* import collaps */}\r\n                                        <CustomCollapse\r\n                                            title = \"About\"\r\n                                            iconClass = \"ri-user-2-line\"\r\n                                            isOpen={isOpen1}\r\n                                            toggleCollapse={toggleCollapse1}\r\n                                        >\r\n\r\n                                            <div>\r\n                                                <p className=\"text-muted mb-1\">{('Name')}</p>\r\n                                                <h5 className=\"font-size-14\">{props.activeUser.name}</h5>\r\n                                            </div>\r\n\r\n                                            <div className=\"mt-4\">\r\n                                                <p className=\"text-muted mb-1\">{('Email')}</p>\r\n                                                <h5 className=\"font-size-14\">{props.activeUser.email}</h5>\r\n                                            </div>\r\n\r\n                                            <div className=\"mt-4\">\r\n                                                <p className=\"text-muted mb-1\">{('Description')}</p>\r\n                                                <h5 className=\"font-size-14\">{props.activeUser.description}</h5>\r\n                                            </div>\r\n\r\n                                            <div className=\"mt-4\">\r\n                                                <p className=\"text-muted mb-1\">{('Location')}</p>\r\n                                                <h5 className=\"font-size-14 mb-0\">{props.activeUser.location}</h5>\r\n                                            </div>\r\n                                        </CustomCollapse>\r\n                                </Card>\r\n               \r\n                            </div>\r\n                        </SimpleBar>\r\n                        </div>\r\n                \r\n         \r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { active_user } = state.Chat;\r\n    const { userSidebar } = state.Layout;\r\n    return { active_user,userSidebar };\r\n};\r\n\r\nexport default connect(mapStateToProps, { closeUserSidebar })(UserProfileSidebar);","import React, { useState } from \"react\";\r\nimport {\r\n  Dropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  Media,\r\n  Button,\r\n  // Input,\r\n  Row,\r\n  Col,\r\n} from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { openUserSidebar, setFullUser } from \"../../../redux/actions\";\r\n\r\nfunction UserHead(props) {\r\n  // const [dropdownOpen, setDropdownOpen] = useState(false);\r\n  const [dropdownOpen1, setDropdownOpen1] = useState(false);\r\n\r\n  // const toggle = () => setDropdownOpen(!dropdownOpen);\r\n  const toggle1 = () => setDropdownOpen1(!dropdownOpen1);\r\n\r\n  const openUserSidebar = (e) => {\r\n    e.preventDefault();\r\n    props.openUserSidebar();\r\n  };\r\n\r\n  function closeUserChat(e) {\r\n    e.preventDefault();\r\n    var userChat = document.getElementsByClassName(\"user-chat\");\r\n    if (userChat) {\r\n      userChat[0].classList.remove(\"user-chat-show\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"p-3 p-lg-4 border-bottom\">\r\n        <Row className=\"align-items-center\">\r\n          <Col sm={4} xs={8}>\r\n            <Media className=\"align-items-center\">\r\n              <div className=\"d-block d-lg-none mr-2\">\r\n                <Link to=\"#\"  onClick={(e) => closeUserChat(e)} className=\"user-chat-remove text-muted font-size-16 p-2\" >\r\n                  <i className=\"ri-arrow-left-s-line\"></i>\r\n                </Link>\r\n              </div>\r\n              {/* {props.users[props.active_user].profilePicture !== \"Null\" ? ( */}\r\n                <div className=\"mr-3\">\r\n                  <img\r\n                    src={props.allUserData.map((list) => {\r\n                        if ( list.email === (props.chats[props.active_user].users[0] !== props.userEmail ? props.chats[props.active_user].users[0] : props.chats[props.active_user].users[1])) {\r\n                            return list.image;\r\n                        } else {  return \"\"; }\r\n                    }).join(\"\").trim(\"\")}\r\n                    className=\"rounded-circle avatar-xs\"\r\n                    alt=\"letschat\"\r\n                  />\r\n                </div>\r\n\r\n              <Media body className=\"overflow-hidden\">\r\n                <h5 className=\"font-size-16 mb-0 text-truncate\">\r\n                  <Link to=\"#\" onClick={(e) => openUserSidebar(e)} className=\"text-reset user-profile-show\" >\r\n                    {props.allUserData.map((list) => {\r\n                        if (list.email === (props.chats[props.active_user].users[0] !== props.userEmail ? props.chats[props.active_user].users[0] : props.chats[props.active_user].users[1])) {\r\n                            return list.name;\r\n                        }\r\n                        else{\r\n                            return \"\"\r\n                        }\r\n                    })}\r\n                  </Link>\r\n                  {props.allUserData.map((list, key) => {\r\n                        if (list.email === (props.chats[props.active_user].users[0] !== props.userEmail ? props.chats[props.active_user].users[0] : props.chats[props.active_user].users[1])) {\r\n                          if(list.isOnline){\r\n                              return(<i key={key} className=\"ri-record-circle-fill font-size-10 text-success d-inline-block ml-1\"></i>\r\n                               )\r\n                          } else{\r\n                              return(\r\n                                  <i key={key} className=\"ri-record-circle-fill font-size-10 text-secondary d-inline-block ml-1\"></i>\r\n                              )\r\n                          }\r\n                      }\r\n                      else{\r\n                          return \"\"\r\n                      }\r\n                    })\r\n                  }\r\n                </h5>\r\n                {\r\n                  ((props.chats[props.active_user].typing).length > 0 && (props.chats[props.active_user].typing).includes((props.chats[props.active_user].users[0] !== props.userEmail ? props.chats[props.active_user].users[0] : props.chats[props.active_user].users[1]))) &&\r\n                  <p className=\"mb-0\">\r\n                      typing\r\n                      <span className=\"animate-typing\">\r\n                          <span className=\"dot ml-1\"></span>\r\n                          <span className=\"dot ml-1\"></span>\r\n                          <span className=\"dot ml-1\"></span>\r\n                      </span>\r\n                  </p>\r\n                }\r\n              </Media>\r\n            </Media>\r\n          </Col>\r\n          <Col sm={8} xs={4}>\r\n            <ul className=\"list-inline user-chat-nav text-right mb-0\">\r\n              <li className=\"list-inline-item d-none d-lg-inline-block\">\r\n                <Button\r\n                  type=\"button\"\r\n                  color=\"none\"\r\n                  onClick={(e) => openUserSidebar(e)}\r\n                  className=\"nav-btn user-profile-show\"\r\n                >\r\n                  <i className=\"ri-user-2-line\"></i>\r\n                </Button>\r\n              </li>\r\n\r\n              <li className=\"list-inline-item\">\r\n                <Dropdown isOpen={dropdownOpen1} toggle={toggle1}>\r\n                  <DropdownToggle\r\n                    className=\"btn nav-btn \"\r\n                    color=\"none\"\r\n                    type=\"button\"\r\n                  >\r\n                    <i className=\"ri-more-fill\"></i>\r\n                  </DropdownToggle>\r\n                  <DropdownMenu right>\r\n                    <DropdownItem\r\n                      className=\"d-block d-lg-none user-profile-show\"\r\n                      onClick={(e) => openUserSidebar(e)}\r\n                    >\r\n                      View profile{\" \"}\r\n                      <i className=\"ri-user-2-line float-right text-muted\"></i>\r\n                    </DropdownItem>\r\n                  </DropdownMenu>\r\n                </Dropdown>\r\n              </li>\r\n            </ul>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { active_user } = state.Chat;\r\n  return { ...state.Layout, active_user };\r\n};\r\n\r\nexport default connect(mapStateToProps, { openUserSidebar, setFullUser })(\r\n  UserHead\r\n);\r\n","import React, { useState } from 'react';\r\nimport { Button, Input, Row, Col,\r\n    //  UncontrolledTooltip, ButtonDropdown, DropdownToggle, DropdownMenu, Label, \r\n     Form } from \"reactstrap\";\r\n// import { Picker } from 'emoji-mart'\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport { initFirebaseBackend } from \"../../../helpers/firebase\";\r\n\r\nfunction ChatInput(props) {\r\n    const [textMessage, settextMessage] = useState(\"\");\r\n    // const [isOpen, setisOpen] = useState(false);\r\n    const [file, setfile] = useState({\r\n        name : \"\",\r\n        size : \"\"\r\n    });\r\n    const [fileImage, setfileImage] = useState(\"\")\r\n\r\n    // const toggle = () => setisOpen(!isOpen);\r\n\r\n    //function for text input value change\r\n    const handleChange = e => {\r\n        settextMessage(e.target.value)\r\n    }\r\n\r\n    //function for add emojis\r\n    // const addEmoji = e => {\r\n    //     let emoji = e.native;\r\n    //     settextMessage(textMessage+emoji)\r\n    // };\r\n\r\n    //function for file input change\r\n    // const handleFileChange = e => {\r\n    //     if(e.target.files.length !==0 )\r\n    //     setfile({\r\n    //         name : e.target.files[0].name,\r\n    //         size : e.target.files[0].size\r\n    //     })\r\n    // }\r\n\r\n    //function for image input change\r\n    // const handleImageChange = e => {\r\n    //     if(e.target.files.length !==0 )\r\n    //     setfileImage(URL.createObjectURL(e.target.files[0]))\r\n    // }\r\n\r\n    //function for send data to onaddMessage function(in userChat/index.js component)\r\n    const onaddMessage = (e, textMessage) => {\r\n        e.preventDefault();\r\n        //if text value is not emptry then call onaddMessage function\r\n        if(textMessage !== \"\") {\r\n            props.onaddMessage(textMessage, \"textMessage\");\r\n            settextMessage(\"\");\r\n        }\r\n\r\n        //if file input value is not empty then call onaddMessage function\r\n        if(file.name !== \"\") {\r\n            props.onaddMessage(file, \"fileMessage\");\r\n            setfile({\r\n                name : \"\",\r\n                size : \"\"\r\n            })\r\n        }\r\n\r\n        //if image input value is not empty then call onaddMessage function\r\n        if(fileImage !== \"\") {\r\n            props.onaddMessage(fileImage, \"imageMessage\");\r\n            setfileImage(\"\")\r\n        }\r\n    }\r\n\r\n    const typing = async () => {\r\n        const { docid } = props.chats;\r\n        const { userEmail } = props;\r\n        let finalData = await getCurrentTypingData(docid);\r\n    \r\n\r\n          if (!finalData.includes(userEmail)) {\r\n            await finalData.push(userEmail);\r\n          }\r\n        \r\n    console.log(finalData)\r\n        await initFirebaseBackend().firestore().collection(\"chats\").doc(docid).update({\r\n          typing: finalData,\r\n        });\r\n    };\r\n\r\n    const getCurrentTypingData = async (docid) => {\r\n         try {\r\n          const dt = await initFirebaseBackend().firestore().collection(\"chats\").doc(docid).get().then((obj) => {\r\n              return obj.data().typing;\r\n            });\r\n          return dt;\r\n        } catch (e) {\r\n          return [];\r\n        }\r\n      };\r\n    \r\n      const focus = async () => {\r\n        await typing();\r\n      }\r\n\r\n      const blur = async () => {\r\n        const { docid } = props.chats;\r\n        const { userEmail } = props;\r\n        let finalData = await getCurrentTypingData(docid);\r\n        finalData = finalData.filter((ob) => { if (ob !== userEmail) { return ob; } });\r\n        console.log(finalData)\r\n        await initFirebaseBackend().firestore().collection(\"chats\").doc(docid).update({\r\n          typing: finalData,\r\n        });\r\n    }\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"p-3 p-lg-4 border-top mb-0\">\r\n                            <Form onSubmit={(e) => onaddMessage(e, textMessage)} >\r\n                                <Row noGutters>\r\n                                    <Col>\r\n                                        <div>\r\n                                            <Input type=\"text\" value={textMessage} onChange={handleChange} onFocus={focus} onBlur={blur} className=\"form-control form-control-lg bg-light border-light\" placeholder=\"Enter Message...\" />\r\n                                        </div>\r\n                                    </Col>\r\n                                    <Col xs=\"auto\">\r\n                                        <div className=\"chat-input-links ml-md-2\">\r\n                                            <ul className=\"list-inline mb-0\">\r\n                                                {/* <li className=\"list-inline-item\">\r\n                                                <ButtonDropdown className=\"emoji-dropdown\" direction=\"up\" isOpen={isOpen} toggle={toggle}>\r\n                                                    <DropdownToggle id=\"emoji\" color=\"link\" className=\"text-decoration-none font-size-16 btn-lg waves-effect\">\r\n                                                        <i className=\"ri-emotion-happy-line\"></i>\r\n                                                    </DropdownToggle>\r\n                                                    <DropdownMenu className=\"dropdown-menu-lg-right\">\r\n                                                        <Picker onSelect={addEmoji} />\r\n                                                    </DropdownMenu>\r\n                                                    </ButtonDropdown>\r\n                                                    <UncontrolledTooltip target=\"emoji\" placement=\"top\">\r\n                                                        Emoji\r\n                                                    </UncontrolledTooltip>\r\n                                                </li> */}\r\n                                      \r\n                                                {/* <li className=\"list-inline-item input-file\">\r\n                                                    <Label id=\"images\" className=\"mr-1 btn btn-link text-decoration-none font-size-16 btn-lg waves-effect\">\r\n                                                        <i className=\"ri-image-fill\"></i>\r\n                                                    <Input onChange={(e) => handleImageChange(e)} accept=\"image/*\" type=\"file\" name=\"fileInput\" size=\"60\" />\r\n                                                    </Label>   \r\n                                                    <UncontrolledTooltip target=\"images\" placement=\"top\">\r\n                                                        Images\r\n                                                    </UncontrolledTooltip>\r\n                                                </li> */}\r\n                                                <li className=\"list-inline-item\">\r\n                                                    <Button type=\"submit\" color=\"primary\" className=\"font-size-16 btn-lg chat-send waves-effect waves-light\">\r\n                                                        <i className=\"ri-send-plane-2-fill\"></i>\r\n                                                    </Button>\r\n                                                </li>\r\n                                            </ul>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Form>\r\n                        </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ChatInput;","import React, { useState,useEffect, useRef } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport SimpleBar from \"simplebar-react\";\r\nimport { withRouter } from 'react-router-dom';\r\nimport UserProfileSidebar from \"../../../components/UserProfileSidebar\";\r\nimport UserHead from \"./UserHead\";\r\nimport ChatInput from \"./ChatInput\";\r\nimport { openUserSidebar,setFullUser } from \"../../../redux/actions\";\r\nimport { initFirebaseBackend } from \"../../../helpers/firebase\";\r\n\r\nfunction UserChat(props) {\r\n    const ref = useRef();\r\n    // const [ allUsers ] = useState(props.chats);\r\n    const [ chatMessages, setchatMessages ] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if(props.chats.length > 0) setchatMessages(props.chats[props.active_user].messages);\r\n        ref.current.recalculate();\r\n        if (ref.current.el) {\r\n            ref.current.getScrollElement().scrollTop = ref.current.getScrollElement().scrollHeight;\r\n        }\r\n    },[props.active_user, props.chats]);\r\n\r\n    const addMessage = async (message, type) => {\r\n        const { docid } = props.chats[props.active_user];\r\n        const { userEmail } = props;\r\n        const time = Date.now()\r\n        // console.log(time)\r\n        const timestamp = Date.now();\r\n        if(message && message !== '')\r\n        await initFirebaseBackend().firestore().collection(\"chats\").doc(docid).update({\r\n            messages: initFirebaseBackend().f().firestore.FieldValue.arrayUnion({\r\n            sender: userEmail,\r\n            message: message,\r\n            time: time,\r\n            type: \"text\",\r\n          }),\r\n          time: timestamp,\r\n        });\r\n        scrolltoBottom();\r\n    }\r\n\r\n    function scrolltoBottom(){\r\n        if (ref.current.el) {\r\n            ref.current.getScrollElement().scrollTop = ref.current.getScrollElement().scrollHeight;\r\n        }\r\n    }\r\n\r\n    function isToday(someDate){\r\n        // const today = new Date()\r\n        // return someDate.getDate() === today.getDate() &&\r\n        //   someDate.getMonth() === today.getMonth() &&\r\n        //   someDate.getFullYear() === today.getFullYear()\r\n        return false;\r\n      }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"user-chat w-100\">\r\n                <div className=\"d-lg-flex\">\r\n                    <div className={ props.userSidebar ? \"w-70\" : \"w-100\" }>\r\n                        {/* render user head */}\r\n                        <UserHead chats = {props.chats} allUserData={props.allUserData} userEmail = {props.userEmail} /> \r\n\r\n                            <SimpleBar style={{ maxHeight: \"100%\" }} ref={ref} className=\"chat-conversation p-3 p-lg-4\" id=\"messages\">\r\n                                   <ul className=\"list-unstyled mb-0\">\r\n                                    {(chatMessages.length > 0) ?\r\n                                    chatMessages.map((chat, key) => \r\n                                        isToday(chat.time.seconds) === true ? <li key={\"dayTitle\" + key}> \r\n                                            <div className=\"chat-day-title\">\r\n                                                <span className=\"title\">Today</span>\r\n                                            </div>\r\n                                        </li> : \r\n                                            <li key={key} className={chat.sender === props.userEmail ? \"right\" : \"\"}>\r\n                                                <div className=\"conversation-list\">\r\n                                                        {\r\n                                                            //logic for display user name and profile only once, if current and last messaged sent by same receiver\r\n                                                            chatMessages[key+1] ? chatMessages[key].sender === chatMessages[key+1].sender ? \r\n                                                            \r\n                                                            <div className=\"chat-avatar\">\r\n                                                                <div className=\"blank-div\"></div>\r\n                                                            </div>\r\n                                                            :  \r\n                                                                <div className=\"chat-avatar\">\r\n                                                                    {chat.sender === props.userEmail ?   <img src={(props.allUserData.find(item => item.email === props.userEmail)).image} alt=\"letsChat\" /> : \r\n                                                                        (props.allUserData.find(item => item.email === (props.chats[props.active_user].users.find(item => item !== props.userEmail)))).image === \"Null\" ?\r\n                                                                            <div className=\"chat-user-img align-self-center mr-3\">\r\n                                                                                <div className=\"avatar-xs\">\r\n                                                                                    <span className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\r\n                                                                                        {(props.allUserData.find(item => item.email === (props.chats[props.active_user].users.find(item => item !== props.userEmail)))).name.charAt(0)}\r\n                                                                                    </span>\r\n                                                                                </div>\r\n                                                                            </div>\r\n                                                                        :  <img src={(props.allUserData.find(item => item.email === (props.chats[props.active_user].users.find(item => item !== props.userEmail)))).image} alt=\"letsChat\" />\r\n                                                                    }\r\n                                                                </div>\r\n                                                            :   <div className=\"chat-avatar\">\r\n                                                                     {chat.sender === props.userEmail ?   <img src={(props.allUserData.find(item => item.email === props.userEmail)).image} alt=\"letsChat\" /> : \r\n                                                                         (props.allUserData.find(item => item.email === (props.chats[props.active_user].users.find(item => item !== props.userEmail)))).image === \"Null\" ?\r\n                                                                            <div className=\"chat-user-img align-self-center mr-3\">\r\n                                                                                <div className=\"avatar-xs\">\r\n                                                                                    <span className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\r\n                                                                                        {(props.allUserData.find(item => item.email === (props.chats[props.active_user].users.find(item => item !== props.userEmail)))).name.charAt(0)}\r\n                                                                                    </span>\r\n                                                                                </div>\r\n                                                                            </div>\r\n                                                                        :  <img src={(props.allUserData.find(item => item.email === (props.chats[props.active_user].users.find(item => item !== props.userEmail)))).image} alt=\"letsChat\" />\r\n                                                                    }\r\n                                                                </div>\r\n                                                        }\r\n                                                    \r\n                \r\n                                                    <div className=\"user-chat-content\">\r\n                                                        <div className=\"ctext-wrap\">\r\n                                                            <div className=\"ctext-wrap-content\">\r\n                                                                {\r\n                                                                    chat.message &&\r\n                                                                        <p className=\"mb-0  text-left\">\r\n                                                                            {chat.message}\r\n                                                                        </p>\r\n                                                                }\r\n                                                                {/* {\r\n                                                                    ((props.chats[props.active_user].typing).length > 0 && (props.chats[props.active_user].typing).includes((props.chats[props.active_user].users[0] !== props.userEmail ? props.chats[props.active_user].users[0] : props.chats[props.active_user].users[1]))) &&\r\n                                                                        <p className=\"mb-0\">\r\n                                                                            typing\r\n                                                                            <span className=\"animate-typing\">\r\n                                                                                <span className=\"dot ml-1\"></span>\r\n                                                                                <span className=\"dot ml-1\"></span>\r\n                                                                                <span className=\"dot ml-1\"></span>\r\n                                                                            </span>\r\n                                                                        </p>\r\n                                                                } */}\r\n                                                                {\r\n                                                                    \r\n                                                                    <p className=\"chat-time mb-0\"> <span className=\"align-middle\">{chat.time.seconds}  <i className=\"ri-check-double-fill\"></i> </span></p>\r\n                                                                }\r\n                                                            </div>\r\n                                                                    \r\n                                                        </div>\r\n                                                        {\r\n                                                            chatMessages[key+1] ? chatMessages[key].sender === chatMessages[key+1].sender ? null :  \r\n                                                            <div className=\"conversation-name\">\r\n                                                                {chat.sender === props.userEmail ? (props.allUserData.find(item => item.email === props.userEmail)).name\r\n                                                                : (props.allUserData.find(item => item.email === (props.chats[props.active_user].users.find(item => item !== props.userEmail)))).name}</div> \r\n                                                                : <div className=\"conversation-name\">\r\n                                                                    {chat.sender === props.userEmail ? (props.allUserData.find(item => item.email === props.userEmail)).name\r\n                                                                    : (props.allUserData.find(item => item.email === (props.chats[props.active_user].users.find(item => item !== props.userEmail)))).name}\r\n                                                                </div>\r\n                                                        }\r\n                                                   </div>\r\n                                                </div>\r\n                                            </li>\r\n                                    ) : \"No Messages\"\r\n                                }\r\n                                 </ul>\r\n                                </SimpleBar>   \r\n                        <ChatInput onaddMessage={addMessage} chats={props.chats[props.active_user]}  userEmail={props.userEmail} />\r\n                    </div>\r\n                    <UserProfileSidebar activeUser={(props.allUserData.find(item => item.email === (props.chats[props.active_user].users.find(item => item !== props.userEmail))))} />\r\n\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { active_user } = state.Chat;\r\n    const { userSidebar } = state.Layout;\r\n    return { active_user,userSidebar };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, { openUserSidebar,setFullUser })(UserChat));\r\n\r\n","import React, {Component} from \"react\";\r\nimport ChatLeftSidebar from \"./ChatLeftSidebar\";\r\nimport UserChat from \"./UserChat/\";\r\nimport { initFirebaseBackend } from \"../../helpers/firebase\";\r\n\r\nexport default class Index extends Component {\r\n  state = {\r\n    newChatFormVisible: false,\r\n    email: null,\r\n    chats: [],\r\n    allUserData: [],\r\n    user: [],\r\n    blockList: [],\r\n  };\r\n\r\n  componentDidMount = async () => {\r\n    initFirebaseBackend().auth().onAuthStateChanged(async (user) => {\r\n      if (!user) {\r\n        this.props.history.push(\"/logout\");\r\n      } else {\r\n        try {\r\n          await this.setState({ user: user, email: user.email });\r\n          await this.getAllUsersData();\r\n          await this.getInfo(user);\r\n\r\n          await this.onlineStatusUpdate(user.email);\r\n        } catch (e) {\r\n          await this.props.history.push(\"/logout\");\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  showChatSection(){\r\n      this.setState({newChatFormVisible : true})\r\n  }\r\n\r\n  onlineStatusUpdate = async (email) => {\r\n    const id = await initFirebaseBackend().firestore().collection(\"users\").where(\"email\", \"==\", email).get().then((snapshot) => {\r\n        return snapshot.docs.map((ob) => ob.id)[0];\r\n      });\r\n\r\n    const time = setTimeout(async () => {\r\n      try {\r\n        if (id !== \"undefined\") {\r\n          await initFirebaseBackend().firestore().collection(\"users\").doc(id).update({\r\n            isOnline: true,\r\n            // isVerify: true,\r\n          });\r\n        } else {\r\n          await this.onlineStatusUpdate();\r\n        }\r\n      } catch (e) {\r\n        console.log(e);\r\n        this.props.history.push(\"/logout\");\r\n      }\r\n\r\n      clearTimeout(time);\r\n    }, 2000);\r\n  };\r\n\r\n  // getBlockList = async () => {\r\n  //   const { allUserData, email } = this.state;\r\n\r\n  //   const list = allUserData.forEach(async (obj) => {\r\n  //     if (obj.email === email) {\r\n  //       await this.setState({ blockList: obj.blocklist });\r\n  //     }\r\n  //   });\r\n  // };\r\n\r\n  getAllUsersData = async () => {\r\n    await initFirebaseBackend().firestore().collection(\"users\").onSnapshot(async (snapshot) => {\r\n      var dt = snapshot.docs.map((docs) => docs.data());\r\n\r\n      await this.setState({ allUserData: dt });\r\n      // await this.getBlockList();\r\n    });\r\n  };\r\n\r\n  getInfo = async (user, emails) => {\r\n    await initFirebaseBackend().firestore().collection(\"chats\").where(\"users\", \"array-contains\", user.email).onSnapshot(async (res) => {\r\n        const chats = res.docs.map((docs) => docs.data());\r\n\r\n        chats.sort((a, b) => {\r\n          if (a.time < b.time) { return 1;}\r\n          else if (a.time > b.time) { return -1; }\r\n          else { return 0; }\r\n        });\r\n\r\n        var chatList = [];\r\n\r\n        if (emails) {\r\n          chatList = await chats.filter((chats) => {\r\n            var getEmail = chats.users[0] !== user.email ? chats.users[0] : chats.users[1];\r\n            if (emails.includes(getEmail)) { return chats;}\r\n          });\r\n        }\r\n\r\n        if (!emails) { await this.setState({ email: user.email, chats: chats, }); }\r\n        else { await this.setState({ email: user.email, chats: chatList, });\r\n        }\r\n      });\r\n  };\r\n\r\n  searchChat = async (search) => {\r\n    const { email, user } = this.state;\r\n    const emails = await this.fetchSearchEmail(search, email);\r\n    await this.getInfo(user, emails);\r\n  };\r\n\r\n  fetchSearchEmail = async (search, email) => {\r\n    const emails = [];\r\n    const { allUserData } = this.state;\r\n\r\n    await allUserData.map((list) => {\r\n      if (list.name.indexOf(search) !== -1 && list.email !== email) {\r\n        emails.push(list.email);\r\n      }\r\n    });\r\n\r\n    return emails;\r\n  };\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n          {this.state.chats.length > 0 ?\r\n          <>\r\n          <ChatLeftSidebar     \r\n            history={this.props.history}\r\n            chats={this.state.chats}\r\n            userEmail={this.state.email}\r\n            allUserData={this.state.allUserData} \r\n            />\r\n            \r\n                <UserChat \r\n                    // recentChatList={users} \r\n                    history={this.props.history}\r\n                    chats={this.state.chats}\r\n                    userEmail={this.state.email}\r\n                    allUserData={this.state.allUserData} \r\n                 />\r\n                 </>\r\n                 : null\r\n            }\r\n        </React.Fragment>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}